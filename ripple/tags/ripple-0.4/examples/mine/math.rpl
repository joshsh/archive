

@define min:
    dupd! dup! swapd! gt! popd pop branch!.
@define max:
    dupd! dup! swapd! gt! pop popd branch!.

2 3 /:max.  # 3
3 2 /:max.  # 3
2 3 /:min.  # 2
3 2 /:min.  # 2


### recursive factorial ################

# n => factorial(n)
@define fact:
    /dup 0 /equal                  # if n is 0...
        (1 /popd)                  # yield 1
        (/dup 1 /sub /:fact /mul)  # otherwise, yield n*fact(n-1)
    /branch.

# => 120
5/:fact.


### recursive Fibonacci ################

@define fib:
    /dup 2/lt                               # if n is less than two...
    (1 /popd)                               # yield 1
    (1/sub /dup 1/sub :fib/dip /:fib /add)  # otherwise, yield f(n-1) + f(n-2)
    /branch.

0/:fib.  # 1
1/:fib.  # 1
2/:fib.  # 2
3/:fib.  # 3
4/:fib.  # 5
5/:fib.  # 8
6/:fib.  # 13


### iterative Fibonacci ################

# n => fibonacci(n)
@define fib:
    0 1 /rolldown     # push initial value pair and put n on top
    (/swap/dupd/add)  # push the step function
    /swap/times       # execute the step function n times
    /pop.             # select the low value

# => 13
7/:fib.

0/:fib.  # 0
1/:fib.  # 1
2/:fib.  # 1
3/:fib.  # 2
4/:fib.  # 3
5/:fib.  # 5
6/:fib.  # 8
7/:fib.  # 13
