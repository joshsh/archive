<?xml version="1.0" encoding="utf-8"?>
<mx:Application layout="absolute"
                xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:view="view.*"
                backgroundColor="#FFFFFF"
                verticalScrollPolicy="off" horizontalScrollPolicy="off" themeColor="#0000FF" initialize="constructor()"
                fontFamily="Verdana" color="#000000" borderColor="#FF9C00"
                pageTitle="My Other Brain">
    <mx:XMLList id="menuData">
        <menuitem label="File">
            <menuitem label="CreateExperItem"/>
        </menuitem>
        <menuitem label="Edit">
            <menuitem label="Undo"/>
            <menuitem label="Redo"/>
        </menuitem>
        <menuitem label="View">
        	<menuitem label="New column">
        		<menuitem label="Simple view"/>
        		<menuitem label="Edit view"/>
        		<menuitem label="Search view"/>
        	</menuitem>
        	<menuitem label="Visibility level">
        		<menuitem label="Public"/>
        		<menuitem label="Personal"/>
        		<menuitem label="Private"/>
        	</menuitem>
        	<menuitem label="Emphasis threshold">
        		<menuitem label="0"/>
        		<menuitem label="1"/>
        		<menuitem label="2"/>
        		<menuitem label="3"/>
        		<menuitem label="4"/>
        		<menuitem label="5"/>
        	</menuitem>
        </menuitem>
        <menuitem label="Help">
            <menuitem label="About" view="aboutView"/>
        </menuitem>
    </mx:XMLList>
    <mx:Style>
    	Alert {
    		color: #000000;
    		borderColor: #d4ccff;
    		backgroundColor: #d4ccff;
    	}
    	.menuGradient {
            backgroundImage: ClassReference("GradientBackground");
            backgroundSize: "100%";
            fillColors:  #d4ccff, #FFFFFF;
            fillAlphas: 1.0, 1.0;
        }
    </mx:Style>
    <mx:Script>
    	<![CDATA[
    		import view.edit.EditItemViewColumn;
        import view.ItemViewColumn;
        import view.search.SearchViewColumn;
        import SessionInfo;
        import model.MOB;
        import rpc.MOBDispatcher;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.remoting.RemoteObject;
        import view.edit.EditViewColumn;
        import view.simple.SimpleViewColumn;
        import mx.events.MenuEvent;
        import view.ViewColumn;
        import mx.collections.ArrayCollection;
        import mx.rpc.events.ResultEvent;
        import mx.controls.Alert;
        import model.concepts.FirstClassItem;
        import actions.CreateFirstClassItem;
        import mx.collections.ArrayCollection;

        public static const dispatcher:MOBDispatcher = new MOBDispatcher();
        public static var sessionInfo:SessionInfo;

        private function constructor():void {
            getSessionInfo();
        }

		//private function createNewSimpleViewColumn():ViewColumn {
        //    var v:ViewColumn = new SimpleViewColumn();			
        //    this.viewColumnHBox.addViewColumn(v);
        //    return v;
        //}

        //private function createNewEditViewColumn():ViewColumn {
        //    var v:ViewColumn = new EditViewColumn();			
        //    this.viewColumnHBox.addViewColumn(v);
        //    return v;			
        //}

        private function createNewSearchViewColumn():ViewColumn {
            var v:ViewColumn = new SearchViewColumn();
            this.viewColumnHBox.addViewColumn(v);
            return v;
        }

        private function createNewItemViewColumnTmp():ItemViewColumn {
            var v:ItemViewColumn = new ItemViewColumn();
            this.viewColumnHBox.addItemViewColumn(v);
            return v;
        }

        private function createEditItemViewColumnTmp():ItemViewColumn {
            var v:ItemViewColumn = new EditItemViewColumn();
            this.viewColumnHBox.addItemViewColumn(v);
            return v;
        }

        private function menuClickHandler(event:MenuEvent):void {
            var label:String = event.item.@label;
        	
        	// TODO: there must be a better way to differentiate between menu items than comparing labels
            if ("About" == label) {
                Alert.show(sessionInfo.versionInfo, "About");
    			//	Alert.show("you selected " + event.item.@label, "Menu Selection");
                //} else if ("CreateExperItem" == event.item.@label) {
                //    mobSession.getExperimentalObject();
            } else if ("Simple view" == label) {
                createNewItemViewColumnTmp();
            } else if ("Edit view" == label) {
                createEditItemViewColumnTmp();
            } else if ("Search view" == label) {
                createNewSearchViewColumn();
            } else if ("Public" == label || "Personal" == label || "Private" == label) {
                setVisibilityLevel(MOB.NAMESPACE + label);
            } else if ("0" == label || "1" == label || "2" == label || "3" == label || "4" == label || "5" == label) {
                var threshold:Number = Number(label) / 5.0;
                setEmphasisThreshold(threshold);
            }
        }

        private function getSessionInfo():void {
            function handler0(event:ResultEvent):void {
                updateSessionInfo(event.result as SessionInfo);
            }
            dispatcher.getSessionInfo(handler0, null);
		    
    		// TODO: investigate precision issues in passed numbers
            // TODO: investigate passing of URIs
            // TODO: investigate exception handling
            // TODO: investigate encoding issues in passed strings

            var v4:ItemViewColumn = createNewItemViewColumnTmp();
            var v5:ItemViewColumn = createEditItemViewColumnTmp();

            var v3:ViewColumn = createNewSearchViewColumn();
	            //var v1:ViewColumn = createNewSimpleViewColumn();
            //var v2:ViewColumn = createNewEditViewColumn();

            function handler(event:ResultEvent):void {
                var queryResult:ArrayCollection = event.result as ArrayCollection;
                for (var i:int = 0; i < queryResult.length; i++) {
                    //FIXME	            	var f:FirstClassItemWithAssociatedObjects = queryResult.getItemAt(i) as FirstClassItemWithAssociatedObjects;
                    //	            	var it:FirstClassItem = f.subject;
                    //var it:FirstClassItem = queryResult.getItemAt(i) as FirstClassItem;
                    //	                v4.addItem(it);
                }
            }
            dispatcher.getItems(handler, null);
        }

        private function setVisibilityLevel(level:String):void {
            function handler(event:ResultEvent):void {
                updateSessionInfo(event.result as SessionInfo);
            	//Alert.show("visibility level has been set to: " + MOB.getLocalName(visibilityLevel));
            }

            dispatcher.setVisibilityLevel(level, handler, null);
        }

        private function setEmphasisThreshold(threshold:Number):void {
            function handler(event:ResultEvent):void {
                updateSessionInfo(event.result as SessionInfo);
            }

            dispatcher.setEmphasisThreshold(threshold, handler, null);
        }

        private function updateSessionInfo(info:SessionInfo):void {
            sessionInfo = info;
            this.visibilityLevelIcon.source = "assets/icons/12x12/sensitivityLevels/"
                    + MOB.getLocalName(sessionInfo.sensitivityUpperBound).toLowerCase() + ".png";
            this.userNameInfo.text = sessionInfo.userName;
            this.emphasisThresholdInfo.text = sessionInfo.emphasisLowerBound.toString();
        }

        private function showSecurityLevel():void {
            Alert.show("Current visibility level is:" + MOB.getLocalName(sessionInfo.sensitivityUpperBound), "Visibility level");
        }

        private function showUserInfo():void {
            Alert.show("Logged in as '" + sessionInfo.userName + "'", "Authentication");
        }

        private function showEmphasisThreshold():void {
            Alert.show("Current emphasis threshold is: " + sessionInfo.emphasisLowerBound, "Emphasis threshold");
        }
    	]]>
    </mx:Script>
    <mx:VBox id="applicationVBox" width="100%" height="100%" verticalGap="0" borderStyle="none" backgroundColor="#FFFFFF" borderColor="#FF0000">
    	<mx:Canvas styleName="menuGradient" width="100%">
        <mx:MenuBar id="applicationMenuBar" dataProvider="{menuData}" labelField="@label" width="100%"
                    itemClick="menuClickHandler(event)"
                    alpha="0"/>
        </mx:Canvas>	
<!--                    fillAlphas="[1.0, 1.0, 1.0, 1.0]" fillColors="[#D4CCFF, #FFFFFF]" alpha="1.0" borderColor="#FFFFFF"/>-->
        <view:ViewColumnHBox id="viewColumnHBox"/>
    </mx:VBox>
    <mx:HBox id="applicationInfoCorner" alpha="0.33"
    	paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" horizontalGap="3"
    	x="{applicationVBox.width - (applicationInfoCorner.width + (applicationMenuBar.height - applicationInfoCorner.height) / 2)}"
	    	y="{(applicationMenuBar.height - applicationInfoCorner.height) / 2}">  
    	<mx:Text id="userNameInfo" click="showUserInfo()"/> 
    	<mx:Text id="emphasisThresholdInfo" click="showEmphasisThreshold()"/> 	
	    <mx:Image id="visibilityLevelIcon" source="assets/icons/12x12/sensitivityLevels/private.png"
	    	click="showSecurityLevel()"/>
    </mx:HBox>
</mx:Application>
