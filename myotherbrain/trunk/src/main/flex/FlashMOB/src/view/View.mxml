<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:effects="effects.*"
                backgroundColor="#FCFCFC" width="100%" roundedBottomCorners="true" cornerRadius="7"
                dropShadowEnabled="false" borderAlpha="1"
                title="{item.name}"
                verticalScrollPolicy="off"
                borderColor="#FFFFFF" borderThickness="1" borderStyle="solid"
                paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" verticalGap="0"
                showCloseButton="true"
                dragEnter="dragEnterHandler(event);" 
        		dragDrop="dragDropHandler(event);"
        		mouseMove="mouseMoveHandler(event);"
                removedEffect="{sequenceOut}">
    <mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
		import mx.core.BitmapAsset;
        import mx.managers.DragManager;
        import mx.core.UIComponent;
        import mx.core.DragSource;
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import model.FirstClassItem;

        [Bindable]
        public var item:FirstClassItem;
		//[Bindable]
        //protected var nameValue:String;
        //[Bindable]
        //protected var descriptionValue:String;

        public function setItem(newItem:FirstClassItem):void {
            this.item = newItem;
			//this.nameValue = newItem.name;
            //this.descriptionValue = newItem.description;
        }
			
		////////////////////////////

/*
        [Embed(source="assets/icons/12x12/info.png")]
        private var dragItemImage:Class;
        private var dragItemProxy:BitmapAsset = BitmapAsset(new dragItemImage());

        private function initiateDrag(event:MouseEvent):void {
            var source:DragSource = new DragSource();
            source.addData(this.item, "item");
            DragManager.doDrag(event.target as UIComponent, source, event, dragItemProxy, 0, 0, 1);
			//Alert.show("initiated drag");
        }*/
        
        
        import mx.core.DragSource;
        import mx.managers.DragManager;
        import mx.events.*;
        import mx.containers.Canvas;
		
        // Initializes the drag and drop operation.
        private function mouseMoveHandler(event:MouseEvent):void {
            
            // Get the drag initiator component from the event object.
            var dragInitiator:View=View(event.currentTarget);
            
            // Get the color of the drag initiator component.
            //var dragColor:int = dragInitiator.getStyle('backgroundColor');

            // Create a DragSource object.
            var ds:DragSource = new DragSource();

            // Add the data to the object.
            ds.addData(this.item, "item");

            // Call the DragManager doDrag() method to start the drag. 
            DragManager.doDrag(dragInitiator, ds, event);
        }

        // Called when the user moves the drag proxy onto the drop target.
        private function dragEnterHandler(event:DragEvent):void {

            // Accept the drag only if the user is dragging data 
            // identified by the 'color' format value.
            if (event.dragSource.hasFormat("item")) {

                // Get the drop target component from the event object.
                var dropTarget:View=View(event.currentTarget);
                // Accept the drop.
                DragManager.acceptDragDrop(dropTarget);
            }
        }
                
        // Called if the target accepts the dragged object and the user 
        // releases the mouse button while over the Canvas container. 
        private function dragDropHandler(event:DragEvent):void {

            // Get the data identified by the color format 
            // from the drag source.
            var object:FirstClassItem = event.dragSource.dataForFormat("item") as FirstClassItem;
            // Set the canvas color.
            Alert.show("dropping data into item: " + data);
            //myCanvas.setStyle("backgroundColor", data);
            StaticStuff.associateTmp(this.item, object);
        }   
		]]>
	</mx:Script>
	<mx:Sequence id="sequenceOut">
		<!--<mx:Fade id="fadeIn" duration="300"/>
		<effects:ItemRemoveEffect id="hideIt"/>-->
		<mx:Resize id="resizeOut" heightFrom="{this.height}" heightTo="0" hideChildrenTargets="true"/>
	</mx:Sequence>
</mx:TitleWindow>
