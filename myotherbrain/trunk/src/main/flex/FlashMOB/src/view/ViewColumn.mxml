<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:view="view.*"
         horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" height="100%" verticalGap="0"
         borderStyle="none" backgroundAlpha="0.0" borderColor="#FF0000">
    <mx:Style>
        .gradientBackground1 {
            backgroundImage: ClassReference("GradientBackground");
            backgroundSize: "100%";
            fillColors: #FFFFFF, #d4ccff;
            fillAlphas: 1.0, 1.0;
        }
        .fadeoutBackground1 {
            backgroundImage: ClassReference("GradientBackground");
            backgroundSize: "100%";
            fillColors: #FFFFFF, #FFFFFF;
            fillAlphas: 0.0, 1.0;
        }
    </mx:Style>
    <mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			import view.simple.SimpleView;
        import mx.events.CloseEvent;
        import model.concepts.FirstClassItem;
        import mx.controls.Alert;

        // Called when the user moves the drag proxy onto the drop target.
        private function dragEnterHandler(event:DragEvent):void {
            // Accept the drag only if the user is dragging data 
            // identified by the 'color' format value.
            if (event.dragSource.hasFormat("item")) {
                // Get the drop target component from the event object.
                
                var dropTarget:VBox = VBox(event.currentTarget);
                // Accept the drop.
                DragManager.acceptDragDrop(dropTarget);
            }
        }
                
        // Called if the target accepts the dragged object and the user 
        // releases the mouse button while over this container. 
        private function dragDropHandler(event:DragEvent):void {
            var item:FirstClassItem = event.dragSource.dataForFormat("item") as FirstClassItem;
            if (null == item) {
            	Alert.show("no item in drag event");
            } else {
            	addItem(item);
            }           
        } 
		
        public function addItem(it:FirstClassItem):void {
				//Alert.show("adding item: " + it);
            it = StaticStuff.itemRegistry.registerItem(it);
            var v:View = createView(it);
            v.setItem(it);
            //v.addedEffect = this.fadeIn;
            this.containerVBox.addChild(v);

            v.addEventListener(CloseEvent.CLOSE, closeHandler);
        }

        protected function createView(item:FirstClassItem):View {
            Alert.show("override me");
            return null;
        }

        protected function removeView(v:View):void {
            StaticStuff.itemRegistry.unregisterItem(v.item);
            this.containerVBox.removeChild(v);
        }

        protected function closeHandler(event:CloseEvent):void {
            //Alert.show("you will have closed that view");
            var v:View = event.target as View;
            v.alpha = 0.0;
            removeView(v);
        }

        private function createNewItem():void {
            addItem(StaticStuff.createNewItem());
        }
        
        private function clear():void {
        	var a:Array = new Array();
        	for (var i:int = 0; i < this.containerVBox.getChildren().length; i++) {
        		a[i] = this.containerVBox.getChildren()[i];	
        	}
        	
        	for (var j:int = 0; j < a.length; j++) {
        		removeView(a[j] as View);
        	}
        }
        
        // Override me
 		public function search():void {
 			Alert.show("this should have been overridden");
 		}
        
        private function close():void {
        	clear();
        	(this.parent as ViewColumnHBox).removeViewColumn(this);
        }
		]]>
	</mx:Script>
    <mx:VBox width="100%" height="{this.height - columnFooter.height}"
            paddingLeft="5" paddingRight="5"
            borderStyle="none" backgroundAlpha="0.0" borderColor="#FF0000"
            horizontalScrollPolicy="off" verticalScrollPolicy="auto"
         	dragEnter="dragEnterHandler(event);" 
			dragDrop="dragDropHandler(event);"
			backgroundColor="#FFFFFF"> <!-- note: oddly enough, this backgroundColor is necessary for drag and drop -->
        <mx:Spacer height="8"/>
        <mx:VBox id="containerVBox" width="100%"
        	     borderStyle="none" backgroundAlpha="0.0" borderColor="#FF0000"
                 paddingLeft="0" paddingRight="0" verticalGap="5"/>
        <mx:Spacer height="8"/>
    </mx:VBox>
        <!--<mx:MenuBar labelField="@label" width="100%"
                     fillAlphas="[1.0, 1.0, 1.0, 1.0]" fillColors="[#D4CCFF, #FFFFFF, #D4CCFF, #FFFFFF]" alpha="1.0" borderColor="#FFFFFF"/>
                     <mx:Spacer height="3"/>-->
    <mx:VBox id="columnFooter" paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3" width="100%" borderStyle="none"
    	height="{footerContents.height + 6}"
    	styleName="gradientBackground1">
    	<mx:HBox id="footerContents" paddingBottom="0" paddingLeft="0" paddingTop="0" paddingRight="0" width="100%" backgroundAlpha="0.0">  		
	        <mx:Button label="New item" click="createNewItem()"/>
	        <mx:Spacer width="100%"/>
	        <mx:HBox id="searchComponent" visible="false">
	        	<mx:TextInput id="searchInput"/>
	        	<mx:Button label="Search" click="this.search()"/>
	        </mx:HBox>
	        <mx:Button label="Clear" click="clear()"/>
	        <mx:Button label="Close" click="close()"/>
    	</mx:HBox> 
    </mx:VBox>
</mx:VBox>
