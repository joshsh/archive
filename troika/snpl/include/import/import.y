%{
#include <stdio.h>
#include <string.h>

void yyerror(const char *str)
{
	fprintf(stderr,"error: %s\n",str);
}

int yywrap()
{
	return 1;
}

main()
{
	yyparse();
}

/* struct triple; */

#define MAXSIZE 1000

char **charray;
int chindex=-1, itemindex=-1;
int basic_index=-1;
int preserializing_index=-1;
int prims_index=-1;
char *location_str;

void generate_output()
{
  int i;
  char *ch;
  //printf("#ifndef IMPORT_H\n#define IMPORT_H\n\n");
  printf("/* This file is automatically generated by the importing utility.  See import.txt. */\n");
  
  /* Includes */
  printf("\n/* Interface includes for basic data types */\n");
  for (i=0; i<=basic_index; i++) {
    ch = charray[(i*3)+2];
    printf("#include ");
    if (*ch == '<')
      printf("%s\n", ch);
    else
      printf("\"%s\"\n", ch);
  }
  printf("\n/* Interface includes for preserializing data types */\n");
  for (i=basic_index+1; i<=preserializing_index; i++) {
    ch = charray[(i*3)+2];
    printf("#include ");
    if (*ch == '<')
      printf("%s\n", ch);
    else
      printf("\"%s\"\n", ch);
  }	
  printf("\n/* Interface includes for primitives */\n");
  for (i=preserializing_index+1; i<=prims_index; i++) {
    ch = charray[(i*3)+2];
    printf("#include ");
    if (*ch == '<')
      printf("%s\n", ch);
    else
      printf("\"%s\"\n", ch);
  }

/*
user-defined name
text-building (actual) name
interface location (use user-defined name)


SNPL_lookup_table_add(void *p0, void *p1, void *p2)
{
  SNPL_lookup_table *obj = (SNPL_lookup_table *) p0;
  void *arg0 = (void *) p1;
  SNPL_cstring *arg1 = (SNPL_cstring *) p2;
  obj->add(arg0, arg1);
}
*/

  /* Class member wrappers */
  
  
  /* Types constructor */
  printf("\n\n\nvoid SNPL_construct_types()\n{");
  printf("\n  /* Basic data types */\n");
  for (i=0; i<=basic_index; i++) {
    printf("\n  SNPL_register_type(\n");
    printf("    SNPL_data_type_constructor(\n");
    printf("      \"%s\",\n", charray[i*3]);
    ch = charray[(i*3)+1];    
    printf("      %s_serializer,\n", ch);
    printf("      %s_deserializing_constructor,\n", ch);
    printf("      %s_destructor,\n", ch);
    printf("      NULL));\n");
  }
  printf("\n  /* Preserializing data types */\n");
  for (i=basic_index+1; i<=preserializing_index; i++) {
    printf("\n  SNPL_register_type(\n");
    printf("    SNPL_data_type_constructor(\n");
    printf("      \"%s\",\n", charray[i*3]);
    ch = charray[(i*3)+1];    
    printf("      %s_serializer,\n", ch);
    printf("      %s_deserializing_constructor,\n", ch);
    printf("      %s_destructor,\n", ch);
    printf("      %s_preserializer));\n", ch);
  }
  printf("\n  SNPL_register_all_types();");
  printf("}\n");
  
  /* Primitives constructor */
  printf("\n\n\nvoid SNPL_construct_primitives()\n{");
  for (i=preserializing_index+1; i<=prims_index; i++) {
    printf("\n  SNPL_register_primitive(\n");
    printf("    SNPL_cpp_primitive_constructor(\n");
    printf("      \"%s\",\n", charray[i*3]);
    printf("      (void (*)()) %s));\n", charray[(i*3)+1]);
  }
  printf("}\n");
  //printf("\n#endif\n");
}  

%}

%token PERIOD
%token COLON_HEADER
%token WORD

%union 
{
	//triple *s3;
	//triple_list *list;
	char **charray;
	void *void_val;
	char *string;
};

%token <string> LITERAL

%type <void_val> so_is_so_in_so
%type <void_val> so_is_so_in_sos
%type <void_val> basic_data_types
%type <void_val> preserializing_data_types
%type <void_val> primitives

%%

import_txt:
	location
	basic_data_types
	preserializing_data_types
	primitives {
		generate_output();	
	};

location:
	COLON_HEADER LITERAL {
		location_str = $2;
		if (chindex < 0)
		  charray = (char **) malloc(MAXSIZE*sizeof(char *));
		chindex++;
		//printf("location\n");
	};	
	
basic_data_types:
	COLON_HEADER so_is_so_in_sos {
		basic_index = itemindex;
		//printf("basic_data_types\n");
	};
	
preserializing_data_types:
	COLON_HEADER so_is_so_in_sos {
		preserializing_index=itemindex;
		//printf("preserializing_data_types\n");
	};
		
primitives:
	COLON_HEADER so_is_so_in_sos {
		//printf("primitives\n");
		prims_index=itemindex;
	};

so_is_so_in_sos:
	so_is_so_in_so {}
	| so_is_so_in_sos so_is_so_in_so {};
	
so_is_so_in_so:
	LITERAL WORD LITERAL WORD LITERAL PERIOD {
		charray[chindex++] = $1;
		charray[chindex++] = $3;
		charray[chindex++] = $5;
		itemindex++;
		//printf("soissoinso\n");
	};
