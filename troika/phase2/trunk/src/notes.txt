["]  Evaluation of these expressions involves an environment that maps identifiers to values, [...]
["] Mode flags affect __inference extending__ to the web:
["] Reification in RDF and Jena is the ability to treat a Statement as a Resource, and hence to make assertions about that statement. A statement may be reified as many different resources, allowing different manifestations ("statings") of that statement to be treated differently if required.

 Lists are predefined in Caml. The empty list is written [].



# From a working directory with a Makefile:
makedepend




[U2] mutator, collector

[Y] incremental garbage collection
[Y] parallel garbage collection



A "function" to me corresponds to code, not to a closure; neither R4RS
Scheme nor ANSI C let you create new functions (new code) at runtime,
(although both languages have commonly available extensions providing
this capability). But only Scheme, not C, lets you create lexical
closures with unlimited extent.


["] The point in the implementation is "caveman counting".  A caveman 
sees no objects, one object, many objects [...]



boolean
collection__exists( Collection *c, Criterion cr )
{
    Closure *closure1, *closure2;
    Search_Ctx search;

    void *single_result = ( void* ) 0;

    void *break_true_if_match( void *p )
    {
        if ( cr( p ) )
        {
            single_result = p;
            return ( void* ) 1;
        }

        else
            return 0;
    }

    c->type->distribute( c->value, break_true_if_match );

    return ( single_result ) ? TRUE : FALSE;
}




[.] Pthreads -- the only reasonably well standardized thread model

typedef void *(*Genfun)(void);

void
trampoline(Genfun f)
{
	while (f)
		f = (Genfun) (*f)();
}



If malloc-allocated storage is distinguishable by address range from the stack/heap storage, then malloc may be used to allocate (non-relocatable) objects.[5] These objects must be enumerable, so that the GC can first trace these objects (they must have proper tags), and then sweep and explicitly free those objects which have become garbage.


Listing 1. Delaying for n microseconds in C89


    /* C89 */
    {
        struct timeval tv = { 0, n };
        select(0, 0, 0, 0, &tv);
    }



term.print.prefix = "("
term.print.infix = " "
term.print.suffix = ")"


assoc 
assoc term formatter ( "(", " ", " )" );


void p2_term__print( p2_term *t, encoder encode_term_item )
{
    char *cur = buffer;
    encode_term_item( cell, buffer );
    cur += strlen( cur );
    
}





etags

[!] all names ending with _t are reserved by Posix

[GP] makedepend


The core of OO is "Dynamic Dispatch" - you don't know which function you're calling.


    includes of system headers
    includes of local headers
    type and constant definitions
    global variables
    functions

A reasonable variation might be to have several repetitions of the last three sections.

Within each section, order your functions in a ``bottom up'' manner - defining functions before their use. The benefit of avoiding redundant (hence error-prone) forward declarations outweighs the minor irritation of having to jump to the bottom of the file to find the main functions.

In header files, use the following organization:

    type and constant definitions
    external object declarations
    external function declarations




The indent utility can automatically check most of these indentation conventions. The style given here corresponds to the indent options

-bap -bad -nbc -bs -ci0 -di1 -i8

which can be specified in a file named indent.pro in your home directory. Note that indent tends to mess up typedef-defined identifiers unless they are explicitly given on the command line.




Y [SKI] = S (K (S I I)) (S (S (K S) K) (K (S I I)))
Y [SK]  = S S K (S (K (S S (S (S S K)))) K)

