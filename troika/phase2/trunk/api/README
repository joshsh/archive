                                 P H A S E 2

Introduction
================================================================================

Phase2 is an experimental programming language which combines ideas from
functional programming and the Semantic Web.  Phase2 is quite usable as a
simple point-free functional language, however it is intended as a proof of
concept for a computational model based on collections of subject-predicate-
object triples, similar to labeled graphs of the Resource Description Framework
(RDF).  Imagine for a moment that you've been asked to express a computer
program in RDF, and (before you :q in horror) you'll have a rough idea of what
this is all about.

Note: code samples, test scripts and documentation are still on the TODO list.


Requirements
================================================================================

* GNU Compiler Collection (GCC) -- http://www.gnu.org/software/gcc/
      Phase2 makes heavy use of the GNU C extension for nested functions, and
      will not compile as ANSI C.
* GNU make -- http://www.gnu.org/software/make/
      Note on BSD: the default "make" provided with most BSD distributions
      may fail to build Phase2.  You really do need gmake.
* libxml2 -- http://xmlsoft.org/
      For Debian users: "sudo apt-get install libxml2-dev"


Compiling Phase2
================================================================================

The Phase2 package uses GNU autotools and is built in the usual way:

    $ ./configure
    $ make
    $ make install

Note: if the configure script cannot find the libxml2 library (or the optional
ncurses and readline libraries), you will need to tell it where to look:

    $ ./configure LDFLAGS=-L/dir/containing/libxml2.so

Various options may be useful, e.g.

    $ ./configure --prefix=/usr --enable-debug

See ./INSTALL and the output of `configure --help` for more details.  See
./NOTES for a list of machines on which Phase2 has been built and tested.


Using the interpreter
================================================================================

To create a new data set:

    $ phase2

To load a data set:

    $ phase2 -f myfile.p2

Once you're talking to the interpreter, type "_help;" (without quotes) for some
introductory information.

Also try:

    $ phase2 --help


Building Phase2 from scratch
================================================================================

For this you will need the following additional tools:

* GNU autoconf -- http://www.gnu.org/software/autoconf/
* GNU automake -- http://www.gnu.org/software/automake/
* GNU bison or equivalent -- http://www.gnu.org/software/bison/
* GNU flex or equivalent -- http://www.gnu.org/software/flex/
* dot (optional) -- http://www.graphviz.org/
* doxygen -- http://www.doxygen.org/
* xsltproc -- http://xmlsoft.org/XSLT/

If all goes well, the following will produce a configure script:

    $ ./bootstrap.sh

Now ./configure and make as described above.  You can remove all re-buildable
files with:

    $ ./cleanup.sh


Building Phase2 with custom data types and primitive functions
================================================================================

This package contains a utility to "import" custom data types and functions,
written in C, to Phase2.  Any C header file placed beneath the ./src/import/src/
subdirectory will be fed to doxygen at the "bootstrap" phase of the build.  The
doxygen output is transformed into C function stubs which are then compiled
during the "make" phase.  Any doxygen-style comments are parsed for special
symbols which determine how functions and types are to be used.  The underlying
code needs to linked with the resulting libraries either by adding sources to
a Makefile.am or by augmenting LDPATH at the "configure" phase.

The importing utility is not completely documented.  Read the tips below and
examine the contents of ./src/import/src/ for more examples.

* A function parameter or a return type can be a scalar type or a
  pointer-to-scalar type, interchangeably.  Pointer-to-pointer and function
  pointer types are not allowed.  That is to say, if you use them, you'll have
  to be sneaky about it.

* A return type of "void" is allowed.  This will yield a null object when
  applied to an argument.

    extern void eatmyint( int x );

* Functions with zero parameters are not allowed.

* If a returned value is of a pointer type, it must be a NEW value.  When the
  object containing this value is no longer needed, the memory manager will
  call a $destructor method on the value according to its type, which by
  default is the free() function.  You don't want to free() the same memory
  twice, do you?

* If a returned value is of a scalar type, memory will be dynamically
  allocated for it.

* If a type is not found in the "root:types" namespace, a type object will be
  created for it and filled with default methods.  Three of those methods can
  be overridden using the function annotations below.  Phase2 will associate
  an $encoder or $destructor with the type of its first parameter, and a
  $decoder with its return type.

Function annotations:

* $alias -- indicates the name by which the function will be known in the
            "root:primitives" namespace.  By default, this is the same as the
            name of the C function.

    /** $alias="norm" */
    extern double special_norm( double a, double b );

* $encoder -- indicates a function which prints a value to a string buffer.
              This is an essential method for printing and saving data.
              Nota bene: "cstring" is an alias for "char".

    /** $encoder
        \param buffer  $side-effect */
    extern void mytype__encode( mytype *p, cstring *buffer );

* $decoder -- indicates a function which reads a value from a string.
              This is an essential method for deserializing saved data.

    /** $decoder */
    extern mytype *mytype__decode( cstring *buffer );

* $destructor -- indicates a function which frees any memory owned by a value

    /** $destructor
        \param foo  $side-effect */
    extern void mytype__free( mytype *foo );

Parameter annotations

* $side-effect -- indicates that a function is not referentially transparent
                  in the given parameter.  Not yet used.

    /** \param exp  $side-effect */
    extern double frexp(double x, int* exp);


Bugs
================================================================================

Please send bug reports to parcour@gmail.com or use the bug tracker at:
    http://sourceforge.net/projects/phase2/
