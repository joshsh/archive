
                                 P H A S E 2

Phase2 is an experimental language API and interpreter which combine ideas from
functional programming and the Semantic Web.  This is the continuation of an
undergraduate compiler project and is not aimed at any particular user niche.
Its purpose, beyond the learning experience of building a functional language
"from the ground up", is as a proof-of-concept for a programming paradigm (if
that's not too broad a term) based on the concept of triples in the sense of
the Resource Description Framework.  Phase2 is intended not as yet another RDF
toolkit, but as the basis for a family of languages expressed in triples and
which use triples as their fundamental data structure.  Documentation and code
samples are forthcoming.  Meanwhile...


                           --- Compiling Phase2 ---

IMPORTANT: Phase2 is written in GNU C and is only compatible with the GNU C
compiler.  Specifically, it makes liberal use of nested functions.

The Phase2 package uses autotools and is built in the usual way:

    $ ./configure
    $ make

But I usually do something this:

    $ ./configure --prefix=/usr --enable-debug
    $ make 2>stderr.txt; cat stderr.txt

Now:

    $ make install

If you don't want to install, you can use ./src/phase2 as the interpreter
executable.  See ./INSTALL for more details.


                        --- Running the interpreter ---

To invoke the interpeter with no input data set:

    $ phase2

To load a data set:

    $ phase2 -f myfile.p2

Once you're talking to the interpreter, type "_help;" (without quotes) for some
introductory information.

Also try:

    $ phase2 --help


                    --- Building Phase2 from scratch ---

To build Phase2 from scratch you'll need the following tools (in addition to GCC,
make, and libtool):

    yacc or equivalent -- http://www.gnu.org/software/bison/
    lex or equivalent -- http://www.gnu.org/software/flex/
    dot -- http://www.graphviz.org/
    doxygen -- http://www.doxygen.org/
    xsltproc -- http://xmlsoft.org/XSLT/

    $ ./cleanup
    $ ./bootstrap

Now ./configure and make as usual.


                              --- Bugs ---

Please report them to parcour@gmail.com.  At this point I have only built
Phase2 for two different platforms, and welcome any comments on how it behaved
on other machines.


                  --- Ignore everything below this line ---

...unless you're me and you're cross-compiling.


################################################################################
# Cross-compiling libxml2

export CC=your compiler
./configure with proper options
make
make install


################################################################################
# Cross-compile Phase2 for ARM.

This yielded an error-free, debuggable ARM phase2 executable:
1) generate phase2.so using the (crosstool) gcc4 cross-compiler
2) generate phase2 (with 'main') using (Embedix) gcc2 cross-compiler
3) put phase2.so in the device's /usr/lib and invoke phase2


ARM_PREFIX=/opt/Embedix/tools/

CROSSTOOL=/home/joshs/bin/crosstool-0.42
CROSSTOOL=/opt/crosstool/crosstool-0.42

ARM_PREFIX=$CROSSTOOL/result/gcc-4.1.0-glibc-2.3.2/arm-unknown-linux-gnu/arm-unknown-linux-gnu/

# First, cross-compile libxml2 and place the ARM libraries into $ARM_PREFIX/lib

# Necessary when using crosstools binaries.
PATH=$ARM_PREFIX/bin:$PATH

# Note: rationale behind also specifying --build:
#     http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_164.html
./configure --host=arm-linux --build=i686-pc-linux-gnu --prefix=$ARM_PREFIX

make

# Look in here for the ARM executables and libraries:
#     src/.libs/


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


%destructor

libtool --mode=execute gdb src/phase2

Qt4/C++

$(LIBOBJS) and $(ALLOCA)

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

./configure --host=arm-linux --with-linux=$ARM_PREFIX/include

The linker also needs to be arm-linux-ld not ld.


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


