VALGRIND = valgrind -v --tool=memcheck --leak-check=full --show-reachable=yes

## This program builds an object file which is linked with the Phase2 API source
## when an application is compiled.  To import a function [or data type], place a
## skeleton header file in the src directory.  If this function [or data type]
## depends on special libraries or compiler options, these must be specified in
## the project Makefile.


	-fpic  # Create position-independent code for the shared library.




function name, return type
parameter names, parameter types
referential transparency w.r.t. each parameter


## Template header file ########################################################


/** \param a  $transparent */
int add(int a, int b);

struct _foo
{
    int p, q;
};

struct _foo *bar(int x);


## Generated header file #######################################################


extern "C"
{


void *p2_imported__add(void **args)
{
    // Return value is passed by value --> create a container.
    int *ret = malloc( sizeof( int ));

    *ret = add(
        *(( int* ) args[0] ),
        *(( int* ) args[1] ));

    return ( void* ) ret;
}


void *p2_imported__bar(void **args)
{
    // Return value is a pointer type.
    struct _foo *ret;

    ret = bar(
        *(( int* ) args[0] );

    return ( void* ) ret;
}


}  // extern "C"








make 2>stderr.txt; cat stderr.txt



%destructor

libtool --mode=execute gdb src/phase2

Qt4/C++

$(LIBOBJS) and $(ALLOCA)

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix








IGNORE EVERYTHING BELOW THIS LINE
================================================================================

...unless you're me and you're cross-compiling for a Zaurus.


################################################################################
# Cross-compiling libxml2

export CC=your compiler
./configure with proper options
make
make install


################################################################################
# Cross-compile Phase2 for ARM.

This yielded an error-free, debuggable ARM phase2 executable:
1) generate phase2.so using the (crosstool) gcc4 cross-compiler
2) generate phase2 (with 'main') using (Embedix) gcc2 cross-compiler
3) put phase2.so in the device's /usr/lib and invoke phase2


ARM_PREFIX=/opt/Embedix/tools/

CROSSTOOL=/home/joshs/bin/crosstool-0.42
CROSSTOOL=/opt/crosstool/crosstool-0.42

ARM_PREFIX=$CROSSTOOL/result/gcc-4.1.0-glibc-2.3.2/arm-unknown-linux-gnu/arm-unknown-linux-gnu/

# First, cross-compile libxml2 and place the ARM libraries into $ARM_PREFIX/lib

# Necessary when using crosstools binaries.
PATH=$ARM_PREFIX/bin:$PATH

# Note: rationale behind also specifying --build:
#     http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_164.html
./configure --host=arm-linux --build=i686-pc-linux-gnu --prefix=$ARM_PREFIX

make

# Look in here for the ARM executables and libraries:
#     src/.libs/


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


./configure --host=arm-linux --with-linux=$ARM_PREFIX/include

The linker also needs to be arm-linux-ld, not ld.


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::









................................................................................

gui/p2gui: /lib/libc.so.6: version `GLIBC_2.3' not found (required by /usr/lib/libQtCore_debug.so.4)
gui/p2gui: /lib/libc.so.6: version `GLIBC_2.3' not found (required by /usr/lib/libstdc++.so.6)
gui/p2gui: /lib/libc.so.6: version `GLIBC_2.2.4' not found (required by /usr/lib/libgcc_s.so.1)


./textedit
	libQtGui.so.4
	libQtNetwork.so.4

./p2gui, ./p2gui-lite
	libQtGui_debug.so.4

gdb...ipk
	This package seems to depend on other packages.  Please install them, too.
	libncurses.so.5

