Build
================================================================================
* investigate the Maven error "Embedded error: The source must not be a directory."

Exception handling
================================================================================
* decide on an extensible approach for exception handling and error logging
* wrap calls to foreign code in strict try{...}catch(Throwable t){...} blocks for better error recovery

Syntax
================================================================================
* blank node syntax, e.g. _:bar
* QName syntax where local name is empty, e.g.
    rdfs:isDefinedBy
        rdfs:
* edit grammar to more closely resemble Turtle / NTriples
* add character literal syntax, e.g. 'c'

Model
================================================================================
* handle translation of data between RDF and Function data structures
* write a primitive which imports a document as a reified graph in which all subjects are bnodes
* investigate data mapping between OpenRDF objects and Wurfel expressions, specifically, whether there would be performance savings in wrapping OpenRDF objects so as to avoid the use of instanceof
* make LazyEvaluator truly lazy, as well as more efficient

Scuttering
================================================================================
* look into adding a FOAF scutterer
* build a smarter URI dereferencer which can determine the MIME type of a document (so we can grab data from other formats besides RDF/XML)

Concurrency
================================================================================
* explore thread pooling and concurrency
* make all initializers thread-safe.  Make good use of the 'volatile' keyword

Event handling
================================================================================
* investigate java.util.EventObject, java.util.EventListener

Names and namespaces
================================================================================
* decide whether names are determined by URI, rdfs:label, some combination of the two, or something else entirely
* address name collisions, scalability issues in general
* add ability to define terms in the default namespace, then save them
* handle name collisions in a more flexible and configurable way

Command line interface
================================================================================
* interpreter hangs on multi-line comments
* implement an as-you-type parser for tab completion
* place multiple-line expressions in the history
* make Lexicon updatable, without having to rebuild the dictionaries from scratch whenever the model changes

OpenRDF
================================================================================
* Create and use a single Connection object for the evaluation of a single Expression, rather than one Connection object for each operation.  Look into connection pooling.
* investigate warning (encountered while crawling foaf:knows graph starting at TBL):
	2007-01-29 16:57:00:417 [WARNING] Rolling back transaction due to connection close

Ontologies
================================================================================
* give the published ontologies a content type of "application/rdf+xml"
* ontology describing SemanticWebDocuments and where to get them

Testing
================================================================================
* syntax testing (both success and failure cases).  See:
  http://www.dajobe.org/2004/01/turtle/tests/
  http://www.w3.org/2000/10/rdf-tests/rdfcore/ntriples/test.nt
* test of HTTP URI dereferencing
* test of the context filter

Standards
================================================================================
* bring WurfelPrintStream into agreement with some identified set of RDF encoding practices

Use cases
================================================================================
* data hiding use case
* implicit context use case
* distributed programming use case
* DL or other reasoning use case
* later: concurrent programming use case

Nice-to-have
================================================================================
* Swoogle add-on, which performs queries like the one below, then uses the
  result to grab potential models for importing.
      http://logos.cs.umbc.edu:8080/swoogle31/q?queryType=search_swd_ontology&searchString=parrot&key=demo
* RSS reader
* Atom reader
  http://www.intertwingly.net/stories/2003/08/17/atom2rdf.xsl
  Danny Ayers: http://semtext.org/atom/xslt/atom2atomrdf.xslt
  Henry Story: http://djpowell.net/atomrdf/0.1/files/atom2rdf-06.xsl
               http://djpowell.net/schemas/atomrdf/0.1-EXPERIMENTAL/
* Wikipedia3 stuff
  http://labs.systemone.at/wikipedia3
* RDFizer for output of a natural language processing / information extraction tool such as Wraetlic
* XBRL RDFizer
* XML Schema RDFizer
* XLink ^ RDF ?
* file system schema --> RDFize a directory, down to the MIME type and other metadata of each file
* RDF-to-natural-language utilities -- express RDF as plain English, to some extent

Bugs
================================================================================
* repository import occasionally hangs.  Time it out so you don't have to quit the application
* forgot to close a connection somewhere:
  [WARNING] Closing dangling connection due to garbage collection
* sha1SumOf yields a different result than the foaf-a-matic
	"parcour@gmail.com" sha1SumOf;
		fa5fb6acf9d9965d1a3a0dbf8cbe7514bbec10e5
	http://www.ldodds.com/foaf/foaf-a-matic.html
		e9bbf0a3835f323fc4bf3a20f8f41df1b31bda6a
