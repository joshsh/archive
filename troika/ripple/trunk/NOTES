# EagerStackEvaluator is only partially eager:
1 2 or// 3 4 unique/;
	rdf:_1  ( 4 3 <http://fortytwo.net/2007/02/ripple#apply> <http://fortytwo.net/2007/02/ripple#apply> rpl-new:or 2 1 )


EagerStackEvaluator:
    (2 dup/ 3)  -->  (2 dup/ 3)




========================================
rpl-new:pred
========================================

rdfs:Class rdfs:label /pred.


========================================
rpl-new:prim
========================================

2 dup /prim.


========================================
rpl-new:prog
========================================

2 (3) /prog.

ba
	3 /prog.


========================================
rpl-new:assert
========================================

# Note: Sesame will not add the redundant statement.
rdfs:Class rdfs:label "foo" /assert.
rdfs:Class rdfs:label "foo" /assert.
rdfs:Class /rdfs:label.


========================================
rpl-new:deny
========================================

rdfs:Class rdf:type rdfs:Class /deny.
rdfs:Class /rdf:type.

# Note: this doesn't work.
rdfs:Class rdfs:label "Class" /deny.


========================================
rpl-new:dup
========================================

2 /dup.


========================================
rpl-new:equal
========================================

2 2 /equal.
2 3 /equal.


========================================
rpl-new:false
========================================

2 3 /false.


========================================
rpl-new:forget
========================================

rpl:arity.
@count statements.
rpl:arity/forget "don't resolve rpl:arity again" /swap/swap.
@count statements.


========================================
rpl-new:integer-greaterThan
========================================

2 3 /integer-greaterThan.


========================================
rpl-new:integer-lessThan
========================================

2 3 /integer-lessThan.


========================================
rpl-new:limit
========================================

2 3 /or 4 /or 2 /limit.


========================================
rpl-new:or
========================================

1 2 /or.
1 2 /or 3 /or.
1 2 3 /or /or.


========================================
rpl-new:scrap
========================================

2 /scrap.
rdf:Property /dup /rdf:type "this won't work" equal// scrap I V/// /;
rdf:Property /dup /rdf:type rdfs:Class /equal scrap I V/// /;


========================================
rpl-new:swap
========================================

2 3 /swap.


========================================
rpl-new:true
========================================

2 3 /true.


========================================
rpl-new:unique
========================================

"foo" /unique.
2 2 /or/unique.
2 /dup/or/unique.


========================================
rpl-new:zap
========================================

2 3 4 /zap.




========================================
rpl-test:bagElements
========================================

rdfs:Class rdf:_1 "one" /assert.
rdfs:Class rdf:_2 "two" /assert.
rdfs:Class rdf:_3 "three" /assert.

rdfs:Class /bagElements.



@prefix : <http://example.org/foo#>.
@term woot: 2 3 .



V
    Property/dup/rdf:type Class /equal scrap I /V /cat.



_:funRef42
    a rpl:FunctionReference ;
    rpl:body rpl:dup .



V  * as a function which consumes an integer, then another function:
    $ ("earth" "air" "water" or 3*)
      ("earth" "air" "water" or 3 times)




Property/dup/rdf:type "blah"




Beau brother Josh .

Beau brother Josh assert/// 

Beau brother Josh assert @@ .

Beau brother @.

Beau mother @ father @.

Beau sister@ mother@.

Beau sister/mother/.

Beau rel:father/ rel:brother/ ?

Beau foaf:knows*2/.

2 3 add//.         --          2 3 //add.

2 3 add!! .

2 3 add$$ .

Beau foaf:knows*2$.

Beau rel:sister p



2 dup/ integer-add//;


@prefix rpl:  <http://fortytwo.net/2007/02/ripple#>;
rdfs:Class rdfs:label rpl:apply;

2 3 K rpl:apply rpl:apply;
2 3 K S rpl:apply rpl:apply rpl:apply;


# rdf:nil /rdfs:type /rdfs:label ?
# nil/type/label;
rdf:nil rdf:type rpl:apply rdfs:label rpl:apply;

rpl:apply;
rpl:apply rpl:apply;

# [ba]
    rpl:apply rpl:apply rpl:apply;
    rdf:type rpl:apply rdfs:label rpl:apply;


 Class uriToString rpl:apply;







blah/*3knows/depiction;
    vs.
blah/3*knows/depiction;


[V"] commands --> ___ directives (e.g. @prefix), command-line directives (e.g. @saveas)


[V] organize the FortyTwo.net namespace using a Permalink format similar to WordPress, Typo and Community Server, e.g.
    <http://FortyTwo.net/ns/2007/02/02/JoshuaShinavier#me>;
    <http://fortytwo.net/ns/2007/02/02/JoshuaShinavier#me>;
    Note: disallow directory listing for /ns
[C] purl.net


This works:
	<http://www.w3.org/People/Berners-Lee/card#i>;
	<http://my.opera.com/sucks/xml/foaf#me>;
This doesn't:
	<http://www.w3.org/People/Berners-Lee/card#>;
	<http://my.opera.com/sucks/xml/foaf#>;
Neither do these, although these URIs are the subjects of statements once their graph has been imported:
	<http://www.w3.org/People/Berners-Lee/card>;
	<http://my.opera.com/sucks/xml/foaf>;

Wurfel sees these as different:
    <http://www.w3.org/People/Berners-Lee/card#i>;
    <http://www.w3.org/People/Berners-Lee/card.rdf#i>;



* periods for composition may not work, as the period is a valid character in the local part of a URI
	Beau.mother.father
	Beau:mother:*father:?neighbor
	:  :*  :+  :?  :{x}
	#42



    <owl:InverseFunctionalProperty rdf:about="http://www.w3.org/2000/10/swap/pim/contact#emailAddress">
        <domain rdf:resource="http://www.w3.org/2000/10/swap/pim/contact#SocialEntity"/>
        <range rdf:resource="http://www.w3.org/2000/10/swap/pim/contact#_EmailAddress"/>
        <con:_example rdf:parseType="Quote">
            <rdf:Description rdf:about="http://www.w3.org/2000/10/swap/pim/contact#_Dan">
                <con:emailAddress>connolly@w3.org</con:emailAddress>
            </rdf:Description>
        </con:_example>
    </owl:InverseFunctionalProperty>




[?] What happens when the default context is saved if a statement in the default context references a blank node in another context?  If the blank node is discarded, then we'll have to discard the statement.  If the blank nodes is preserved, then we'll have duplicate data when the original context is restored (there's probably no way around this).
    [?] extreme case: a term is defined to reference a blank node outside of the default context

[*] URIs could be created at the Repository level (in fact it so happens that they can be created at any level, with no comparability problems) but we're creating them at the Connection level just because that seems most general.


OpenRDF
================================================================================

N3 parsing is apparently not yet supported:
	2007-01-30 12:19:51,410 [main] DEBUG - Importing model http://www.w3.org/2000/10/swap/test/s1.n3# as http://www.w3.org/2000/10/swap/test/s1.n3#
	2007-01-30 12:19:52,025 [main] ERROR - org.openrdf.rio.UnsupportedRDFormatException: org.openrdf.util.reflect.NoSuchTypeException: No type found for key: N3 (mimeType=text/rdf+n3; ext=n3)
		at org.openrdf.rio.Rio.createParser(Rio.java:132)
		at org.openrdf.rio.Rio.createParser(Rio.java:149)
		at org.openrdf.repository.ConnectionImpl._addInputStreamOrReader(ConnectionImpl.java:265)
		at org.openrdf.repository.ConnectionImpl.add(ConnectionImpl.java:244)
		at wurfel.Context.dereferenceGraph(Context.java:564)
		at wurfel.model.HttpUriDereferencer.dereferenceGraph(HttpUriDereferencer.java:129)
		at wurfel.model.HttpUriDereferencer.dereferenceSubjectUri(HttpUriDereferencer.java:57)
		at wurfel.cli.Interpreter.dereferenceResultSet(Interpreter.java:371)
		at wurfel.cli.Interpreter.evaluate(Interpreter.java:437)
		at wurfel.cli.Interpreter.evaluate(Interpreter.java:463)
		at wurfel.cli.WurfelParser.nt_Statement(WurfelParser.java:136)
		at wurfel.cli.WurfelParser.nt_Input(WurfelParser.java:71)
		at wurfel.cli.Interpreter.runPrivate(Interpreter.java:244)
		at wurfel.cli.Interpreter.run(Interpreter.java:273)
		at wurfel.JLineTest.main(JLineTest.java:46)
	Caused by: org.openrdf.util.reflect.NoSuchTypeException: No type found for key: N3 (mimeType=text/rdf+n3; ext=n3)
		at org.openrdf.util.reflect.KeyedObjectFactory.createInstance(KeyedObjectFactory.java:133)
		at org.openrdf.rio.Rio.createParser(Rio.java:129)
		... 14 more


Exception handling
================================================================================
* Try/catch blocks around calls to Wurfel methods generally expect only WurfelExceptions, and do not catch anything else.  Try/catch blocks around calls to Java methods expect the specific exceptions thrown by those methods.  Try/catch blocks around calls to methods in other libraries catch all Throwables, indiscriminately (Wurfel doesn't trust third-party code).



http://troika.dnsdojo.net/wurfel/target/site/apidocs/index.html
http://troika.dnsdojo.net/simile/longwell/docs/api/

http://w3future.com/weblog/gems/rss2rdf.xsl

Design patterns which may or do apply to Wurfel
================================================================================
* Model-View-Controller / Observer / Event Listener
    ObservableValueSet ^ ConsoleValueSetObserver
* SOA
* Client/Server
* Three-Tier
* Pipeline
    Interpreter ^ WurfelLexer
    diagrammatic syntax
* Implicit Invocation
    [breadth-first reduction]
    ? relation to Active Object ?
* Delegation
    Context ^ Model (although this is more of a bug than a feature)
* Functional Design -- low coupling, lack of side-effects
    expression reduction, almost every other aspect of Wurfel except for static initializers
* Interface
    uses of Java interfaces and abstract classes
* Immutable Object
* Marker Interface -- interface with no methods indicates some property of implementing classes
    WurfelValue
* Factory Method
    Model ^ getCompletor() (although this is a temporary feature)
* Builder
    wurfel.cli.ast ^ evaluate()
* Lazy initialization
    lazy expression evaluation
    various static initializers
    [Literal memoization]
* Aggregate
* Bridge
    [displaying Value={Literal,BNode,URI} in View={console,browser}
* Composite
    any use of an interface
* Container, Iterator
    any use of Java collections
* Extensibility
    [classloader loads primitives from an extension JAR]
        [ba] duplicate classes in a set of extension JARs loaded together
* Adapter
    PrimitiveFunctions which wrap library functions
* Command
    [undo/redo]
* Memento -- caretaker requests a "memento" from the originator before changing it (the originator), then may pass the memento back to the originator to restore it
* Flyweight
* Chain of Responsibility
* State -- state of an object is represented explicitly by another, single, "state" object
* Strategy -- appropriate algorithm is chosen at runtime
* Visitor
* Active Object -- function execution decoupled from invocation, mediated by a Scheduler
    ? relation to Implicit Invocation ?


* Interpreter
    Boeing ^ model test ^ parentheses language
* Facade
    Phase2 ^ xmldom.h
* Proxy
    XpressRules ^ SQL schema deserialization
* Singleton pattern
    MessageHandler

================================================================================


http://pingthesemanticweb.com/imgs/semantic_web_ready_sioc.gif
http://pingthesemanticweb.com/imgs/semantic_web_ready_foaf.gif
http://pingthesemanticweb.com/imgs/semantic_web_ready_doap.png



org/openrdf/util/http/HttpClientUtil.java


unzip -l ./openrdf-util/1.2.6/openrdf-util-1.2.6.jar
	[...]
	     5801  08-21-06 11:15   org/openrdf/util/http/HttpClientUtil.class
	[...]

http://sesame.cvs.sourceforge.net/sesame/openrdf/src/org/openrdf/util/http/HttpClientUtil.java?view=markup




http://sesame.cvs.sourceforge.net/sesame/







::: Wurfel can handle around 35,000 WordNet statements :::::::::::::::::::::::::

!import "file:///home/joshs/dev/wurfel/rdf/wn/wnfull.rdfs" ;
!import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-antonym.rdf" ;
!import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-attribute.rdf" ;
!import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-causes.rdf" ;
!import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-classifiedby.rdf" ;
!import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-derivationallyrelated.rdf" ;
!import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-entailment.rdf" ;
!import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-frame.rdf" ;
[status ] : Processed 468 statements in 0 seconds
[status ] : Processed 3,994 statements in 0 seconds
[status ] : Processed 306 statements in 0 seconds
[status ] : Processed 218 statements in 0 seconds
[status ] : Processed 8,358 statements in 0 seconds
[status ] : Processed 20,701 statements in 1 seconds
[status ] : Processed 409 statements in 0 seconds
[status ] : Processed 367 statements in 0 seconds

!import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-glossary.rdf" ;
Transaction started.
[status ] : Loading data
[WARNING] : Unable to store data in tmp file, attempting to store it in main memory
Transaction finished.
java.lang.OutOfMemoryError: Java heap space
java.lang.OutOfMemoryError: Java heap space


::: WordNet's glossary contains more nested entity definitions than are allowed
    by default :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

1 >>  !import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-glossary.rdf" ;
Transaction started.
[status ] : Loading data
[WARNING] : Unable to store data in tmp file, attempting to store it in main memory
[status ] : Data loaded (0 bytes)
[status ] : Checking data for errors
[Fatal Error] wordnet-glossary.rdf:-1:-1: The parser has encountered more than "64,000" entity expansions in this document; this is the limit imposed by the application.
[ERROR  ] : Failed to add statements: org.openrdf.rio.ParseException: org.xml.sax.SAXParseException: The parser has encountered more than "64,000" entity expansions in this document; this is the limit imposed by the application.
Transaction finished.
2 >>

# Override the limit like this (see http://java.sun.com/j2se/1.5.0/docs/guide/xml/jaxp/JAXP-Compatibility_150.html#JAXP_security):
java -DentityExpansionLimit=150000 -classpath target/wurfel-with-dependencies.jar wurfel.JLineTest "t"


# These ones have even more:
x >>  !import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-hyponym.rdf" ;
x >>  !import "file:///home/joshs/dev/wurfel/rdf/wn/wordnet-wordsensesandwords.rdf" ;

java -DentityExpansionLimit=800000 -classpath target/wurfel-with-dependencies.jar wurfel.JLineTest "t"




::: example of a name collision ::::::::::::::::::::::::::::::::::::::::::::::::

10 >>  Class type ;           (: type --> rdfs:type, but we meant rdf:type :)

11 >>  Class rdf:type;

[0] rdfs:Class
    rdf:type
        rdfs:Class
    rdfs:comment
        The class of classes.
    rdfs:label
        Class
    rdfs:isDefinedBy
        rdfs:
    rdfs:subClassOf
        rdfs:Resource


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::












[" source:Longwell]
	static public Value dupValue(Value v) {
		return v;
		/*
		if (v instanceof Literal) {
			return new LiteralImpl(((Literal) v).getLabel());
		}
		return dupURI((URI) v);
		*/
	}

	static public URI dupURI(URI uri) {
		return uri; //new URIImpl(uri.getURI());
	}
["]
    static public String escape(String s, char toEscape, char escaping, char escaped) {
    static public String unescape(String s, char toEscape, char escaping, char escaped) {
