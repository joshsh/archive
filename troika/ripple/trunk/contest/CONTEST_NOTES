FIX NULL LIST -- ()


startup scripts -- args and return values
grammar ^ Turtle
joy primitives
functions of operators ^ don't need to be RippleValues
refactor source

bugs
	http://www.w3.org/People/djweitzner/public/foaf.rdf
	comments
	remove statements

license


submission format
writeup
readme
website
distribution




Ripple vs Turtle
	*  no 'a' keyword in Ripple
	*  no boolean values for now



================================================================================
Contest submission
================================================================================

sudo apt-get install latex-ucs

pdflatex ripple.tex

# or
latex ripple.tex
dvipdf ripple.dvi


================================================================================

http://www.springer.com/east/home/computer/lncs?SGWID=5-164-7-72376-0&teaserId=45515&CENTER_ID=99829

1.3    Copyright Forms
The copyright form may be downloaded from the “For Authors” (Information for
LNCS Authors) section of the LNCS Website: www.springer.com/lncs. Please
send your signed copyright form to the Contact Volume Editor, either as a
scanned pdf or by fax or by courier. One author may sign on behalf of all the
other authors of a particular paper. Digital signatures are acceptable.


Springer provides you with a complete integrated L TEX document class (llncs.cls)
                                                 A




2.4     Program Co de
Program listings or program commands in the text are normally set in typewriter
font, e.g., CMTT10 or Courier.


References
1. van Leeuwen, J. (ed.): Computer Science Today. Recent Trends and Developments.
   Lecture Notes in Computer Science, Vol. 1000. Springer-Verlag, Berlin Heidelberg
   New York (1995)
2. Bruce, K.B., Cardelli, L., Pierce, B.C.: Comparing Ob ject Encodings. In: Abadi, M.,
   Ito, T. (eds.): Theoretical Aspects of Computer Software. Lecture Notes in Com-
   puter Science, Vol. 1281. Springer-Verlag, Berlin Heidelberg New York (1997) 415–
   438
3. Michalewicz, Z.: Genetic Algorithms + Data Structures = Evolution Programs. 3rd
   edn. Springer-Verlag, Berlin Heidelberg New York (1996)
4. Baldonado, M., Chang, C.-C.K., Gravano, L., Paepcke, A.: The Stanford Digital
   Library Metadata Architecture. Int. J. Digit. Libr. 1 (1997) 108–121





5   Checklist of Items to b e Sent to Volume Editors
Here is a checklist of everything the volume editor requires from you:
   The ﬁnal L TEX source ﬁles
              A
   A ﬁnal PDF ﬁle
   A copyright form, signed by one author on behalf of all the authors of the
   paper.
   A readme giving the ﬁrst name(s) and the surname(s) of all the authors of
   the paper, as well as the name and address of the corresponding author.



















ADD OTHER RPL: TERMS AS KEYWORDS?




Command-query separation





@define listMembers:  rdf:first (/rdf:rest/:listMembers) /union/i.




@prefix : <file:///tmp/new.rdf#>.
@define listMembers: (/rdf:rest/:listMembers)/swap/swap rdf:first /union/i.
pingTheSemanticWeb/rpl:parameters /:listMembers.

dip/rpl:parameters/:listMembers.




	42 /id 42 /id.
	42 /id 42.
	42 42.


Ripple gets recursive definitions for free ...
there is no special trick...


@define factorial:  /dup 0 /equal (/pop 1) (/dup 1 /sub /:factorial /mul) /ifte.
5/:factorial.








================================================================================
Streams and stacks: exploring a FOAF neighborhood
================================================================================




@prefix : <file:///tmp/new.rdf#>.

@define opt:  id/union/i.
5 (10 /add) /:opt.

@prefix foaf: <http://xmlns.com/foaf/0.1/>.

@define foafStep:  /foaf:knows.

@define tbl: <http://www.w3.org/People/Berners-Lee/card#i>.
/:tbl :foafStep/:opt/unique /foaf:name.
/:tbl (:foafStep /:opt/unique) 2 /times /foaf:name.



================================================================================
Searching and filtering in Revyu.com
================================================================================

@prefix foaf:  <http://xmlns.com/foaf/0.1/>.
@prefix owl:   <http://www.w3.org/2002/07/owl#>.
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix scom:  <http://sites.wiwiss.fu-berlin.de/suhl/bizer/bookmashup/simpleCommerceVocab01.rdf#>.
@prefix :      <file:///tmp/stuff.rdf#>.

@define restrict:  dup/swap/dip/i id scrap /ifte.
@define booksReviewsOnly:  (/foaf:primaryTopic/owl:sameAs/rdf:type scom:Book /equal) /:restrict.

@define tomsReviews:  <http://revyu.com/people/tom> /foaf:made.
/:tomsReviews /:booksReviewsOnly (/rev:rating 3 /gt)/:filter /rdfs:label.



 /:tbl (:foafStep /:opt/unique) 2 /times (/foaf:name "Libby Miller" /equal) /:restrict.
 /:tbl (:foafStep /:opt/unique) 1 /times (/foaf:name "Dan Connolly" /equal) /:restrict.

/:tbl :foafStep/:opt/unique (/foaf:name "Edd Dumbill" /equal)/:restrict.


================================================================================
Notes on Ripple Compared with Joy
================================================================================

Ripple takes a slightly different approach to quotation than Joy does.  In Ripple, programs are quoted by default, 

	2 dup

	2 /dup


As in Joy, there are two possible kinds of objects on a stack: passive ones, which are simply treated as data structures, and active ones, which are executed as programs.  For instance:

    42

is a passive object in both Joy and Ripple, while

    dup

and

    /dup

are active objects in Joy and Ripple, respectively.  


compositional pipeline

Ripple ... is a variation on the "concatenative" theme of functional, stack-oriented languages such as Joy and Factor.  Its distinguishing features are 

multivalued nature of RDF relations




The difference in syntax reflects a different attitude towards quotations: in Joy, ~objects are active by default.  To make them passive, you must put them in a quotation, like this:

    [dup]

In Ripple, ~objects are passive by default, so there's less need for explicit quotation:

    dup

On the other hand, for computation to be possible we need at least one active symbol, and Ripple defines exactly one:

    http://fortytwo.net/2007/03/ripple/schema#op

When this symbol is encountered at the head of a program, it has the effect of making the preceding symbol active according to its type:
* If the argument is an List, it is executed as a program
* If the argument is a Function, the stack is first normalized to a depth equal to the function's arity, then the function is applied to the result
* If the argument is a Property, it is applied as a unary function which maps subjects to objects
* Any other type of argument effectively becomes an active nullary function with no output



    2 dup op

which may be abbreviated as

    2 /dup






* If it i


	[2 5 3]  0  [+]  fold

	(2 5 3) 0 add /fold.

	(2 5 3) 0 add fold op.



 whereas in Joy you would enclose a program in a quotation in order to pass it as an argument to a combinator



is not reduced at all
	42 /id 42.
	42 /id 42 42.



primitive functions become keywords in the front-end grammar
	type ">>  dup." --> see that it's the same as joy:dup



does not yield a list view:
	concatenateStrings/rpl:parameters.




4 >>  2 dup 3 /dip.

rdf:_1  (2 joy:dup /net.fortytwo.ripple.model.Op@1e4457d 3)




equivalent:

  2 /dup.
  2 /joy:dup.
  2 /<http://fortytwo.net/2007/03/ripple/joy#dup>.
  2 dup /i.

  2 dup op.
  2 dup rpl:op.
  2 dup <http://fortytwo.net/2007/03/ripple#op>.






@define trivial:  /.




2 dup rpl:op.





================================================================================
Starting an interpreter session
================================================================================

In *nix, you can start the interpreter by executing the script ripple.sh:

    $ ./ripple.sh

...or on Windows, by launching Java directly:

    $ java -classpath target/ripple-full.jar net.fortytwo.ripple.Demo



================================================================================

================================================================================

Ideally, Ripple is supposed attach to a persistent triple store, perform queries and transformations on the store, then detach from it.  As it is, the Sesame 2 back end 



Note: depending on the data you're dealing with (for instance, when loading a large RDF dump), you may 
java -Xmx512M -DentityExpansionLimit=150000 target/ripple-full.jar net.fortytwo.ripple.Demo


================================================================================

================================================================================


Built-in graphs








================================================================================
Implementation
================================================================================

Ripple is written in Java and uses Sesame 2 (beta) as its RDF framework.  The command-line interface relies on ANTLR for lexer/parser generation and JLine for command history and tab completion.  The project is built with Maven and is distributed under an open source license (see License.txt).

To build Ripple from scratch, execute "mvn install" from the root directory containing pom.xml.


================================================================================
Bugs
================================================================================

Oh yes, there will be bugs.  Please report them to parcour@gmail.com until I
set up an issue tracker for Ripple.


Last edited by Joshua Shinavier on Mar. 29, 2007










many important pieces of the query engine and interpreter are mere days or hours old.  

implementation
	Java
	Sesame
	JLine
	(Log4j)
	Maven
		Javadoc
		Checkstyle
		JUnit
		Cobertura
	build from source
	usage
		launching the interpreter
		log files
