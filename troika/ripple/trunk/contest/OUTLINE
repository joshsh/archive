http://fortytwo.net/2007/03/ripple/demo#booksReviewsOnly
demo:bookReviewsOnly.



linked data
	dereferenceable URIs
	forward traversal
	crawling / aggregating RDF
	programs = data
		dereference a program
...
	concatenative syntax
		"point-free" syntax
			as a solution to the problem of expressing functions as rdf:Lists
	compositional pipeline
		lists / stacks
		multiple return values ^ distributive
			appropriateness for a query language
		arity
		evaluator
	operators
		list dequotation
		predicate query
		primitive function application
	extensible / modules
		special values
	RDF equivalence
		of lists
		from RDF, to RDF
	primitive functions
		rpl
			pred
			prim
			prog
			equal
		intmath
			integer-add
			integer-subtract
			integer-multiply
			integer-divide
			integer-mod
		rpl-strings
			urlEncoding
			sha1Sum
			strCat
			uriToString
		Joy
			dup, swap, zap
			true, false
		stream
			unique
				list memoizing
			limit
			scrap
				null sink
			or
		rpl-rdf
			assert
			deny
			forget
		rpl-web
			pingTheSemanticWeb
			swoogleIt
			urlTarget
command line
	directed browsing
	syntax
		N3-like grammar
		relatively insensitive to white space
		comments
			single line
			multi-line
		directives
	interactive interpreter
		advantages over GUI
		error output, recovery
		commands via directives
			@count, @export, @list, @prefix, @quit, @serql, @define
	output
		tree view
	lexicon
	jline
		tab completion
			directives
			lexical terms
				qualified names
				~unqualified names
		command history
implementation
	Java
	Sesame
	JLine
	(Log4j)
	Maven
		Javadoc
		Checkstyle
		JUnit
		Cobertura
	build from source
	usage
		launching the interpreter
		log files
applications
	...

! introduce RDF and Joy in x words or less









Ripple provides for a single RDF query operation: forward traversal from a given subject, by way of a given predicate, to any number of objects.  Ripple does not allow global operations, such as queries for all subjects or all predicates in a graph, all statements about a given subject, etc.  Neither does it allow backward traversal.  While the Java implementation uses a variety of RDF operations internally, Ripple queries themselves are, by design, strictly limited to forward traversal.
* it makes queries simpler
* it allows Ripple to identify a Property with a single function
* it affords interesting opportunities for context and data hiding
* it preserves referential transparency.  It tends to be the case when working with dereferenceable URIs that all of the statements about a given subject come from a single source.  Ripple is only a "functional" language insofar as the data it works with has this property


























================================================================================
Notes on Ripple Compared with Joy
================================================================================






* If it i


	[2 5 3]  0  [+]  fold

	(2 5 3) 0 add /fold.

	(2 5 3) 0 add fold op.



 whereas in Joy you would enclose a program in a quotation in order to pass it as an argument to a combinator



is not reduced at all
	42 /id 42.
	42 /id 42 42.



primitive functions become keywords in the front-end grammar
	type ">>  dup." --> see that it's the same as joy:dup



does not yield a list view:
	concatenateStrings/rpl:parameters.




4 >>  2 dup 3 /dip.

rdf:_1  (2 joy:dup /net.fortytwo.ripple.model.Op@1e4457d 3)




equivalent:

  2 /dup.
  2 /joy:dup.
  2 /<http://fortytwo.net/2007/03/ripple/joy#dup>.
  2 dup /i.

  2 dup op.
  2 dup rpl:op.
  2 dup <http://fortytwo.net/2007/03/ripple#op>.






@define trivial:  /.




2 dup rpl:op.






















