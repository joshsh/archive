stack (or list) ==============

joy:at
joy:concat
joy:cons
joy:dup
joy:dupd
joy:has
joy:id
joy:in
joy:of
joy:pop
joy:popd
joy:rolldown
joy:rolldownd
joy:rollup
joy:rollupd
joy:rotate
joy:rotated
joy:size
joy:stack
joy:swap
joy:swapd
joy:swons
joy:uncons
joy:unstack
joy:unswons
joy:x


joy:branch
joy:choice
joy:ifte


joy:dip
joy:fold
joy:i
joy:times


list =========================

bool ========================
joy:and
joy:false
joy:not
joy:or
joy:true
joy:xor

===============
joy:time



?  when to use the bridge?
	.  when receiving the results of a query
		pros: less indirection
		cons: many unnecessary hash table lookups
	.  in the CLI, when resolving identifiers (eager)
		pros: less indirection
		cons: many unnecessary hash table lookups
	.  at getFunction() time (lazy)
		pros: bridging is postponed until it is absolutely necessary
		cons: your pointers to the item will always be to the rdfValue (of which there may be several), which redirects to a native value

Eager bridging -- process URIs as soon as they are received from the interpreter or from model queries.
Lazy bridging -- 

Eager construction -- construct native objects from RDF values as soon as they are received from the Interpreter or from model queries.
	pros: equals() is very simple
	cons: enormous overhead (type checking, etc.)
Lazy construction -- store query results as RdfValues until getFunction() is needed, at which point the native object is created
	pros: reduced overhead
	cons: what should equals() look like?  How do you compare an RdfValue with a native value?  Suppose you are comparing two anonymous lists, one as RDF and one native.  What do you do?
	?  What if they are identical as native lists, but one has an RDF edge which the other does not?
		--> list comparison is still better than "easy" blank node comparison (that is, comparing blank nodes by ID rather than by their edges)


?  should RdfValues be able to construct their own native values?
	I think not, because that would mean that they need to infer the rdf:type of their value ==> Ripple could not cope with implicitly typed objects
	So, every native value should be able to construct an RdfValue, but no RdfValue should be expected to construct a native value.  That being said, native objects (e.g. list dequotations and forward predicate queries) WILL be constructed in type-specific ways from RDF.
	*  Native type is never discovered from RDF; it is always inferred...
		*  ...with one exception: FunctionEnvelopes have a special type which must be checked for
			ba  this is inefficient; operators really were a better choice from a processing standpoint, as all you need is a call to equals() for each item in a list, rather than an rdf:type query plus a call to equals()



Class /refresh

%  context has already succeeded
       %  context suceeds again
               --> remove old statements and replace with new statements
       %  context fails
               --> keep old context and statements
%  context has already failed
       %  context succeeds
               --> get statements, move context to success list
       %  context fails again
               --> no change


Class /forget
       -- useful for garbage collection?  Is triples management even necessary?
       -- useful for getting rid of unwanted / untrusted statements?



arguments *against* indirection (replacement of expressions with their
reduced counterparts) in reduction:
       .  possibility of multiple reduction algorithms, which yield different results
       .  RDF equivalents of expressions would have to be updated



 public Collection<Value> multiply( Value arg, Value func,
ModelConnection mc )




RippleValue
{



      Value rdfEquivalentOf();
}



PrimitiveFunction
{

      Value rdfEquivalentOf()
      {
              return uri;
      }
}



nt -- new term
nat -- pure native object (no explicit statements)
uri -- a URI

nt := nat  -- all of nt's statements come from nat's toRdf()
nt := uri  -- if an item has a URI,


. nat is loaded from RDF
. nat is pushed back into RDF
. since nat doesn't remember where it came from, it now has duplicate
edges.  Or rather, there are now two copies of nat in the RDF.




P  find out whether a Value received from an RDF query corresponds to
some run-time data structure
      --> look it up with ModelBridge.getNativeEquivalentOf


P  term assigment -- creation of a new node with the same outbound
edges as the source node (the source node is NOT replaced, and the new
node does NOT become the RDF equivalent of the source node)
       If the source node is a literal, an owl:sameAs link is created (for now)

%  RippleValue applied in such a way as to demand an RDF value
       $
               %  Model.multiply(), for both subject and predicate
               %  term assignment in Interpreter
                       value already has a URI --> create a sameAs
                       value has a bnode --> replace bnode with URI
                       value has a literal --> create a sameAs
       -->

*  RippleValue applied in such a way as to demand a native value
      $
              *  when creating a FunctionEnvelope
      -->
      P  if it does not already have a native equivalent, but is of a
native type, create the native equivalent





ModelConnection.toRdf
Interpreter.evaluate
RdfValue.toRdf
ModelBridge.toRdf
(Apply.toRdf)
Combinator.toRdf  --> selfUri
(Filter.toRdf)
(FunctionEnvelope.toRdf)
RippleValue.toRdf
PrimitiveFunction.toRdf  --> selfUri
(ForwardPredicateQuery.toRdf)
(ListDequotation.toRdf)
(Closure.toRdf)

Interpreter.resolveQualifiedName
Interpreter.resolveUnqualifiedName
ApplyNode.evaluate
Extension.load
Model.multiply






      a = mc.intValue(
          mc.castToLiteral( stack.getFirst() ) );
--> mc.toInt( rv )

	

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



2 (3 integer-add);

K ("wrong!" ("right!" V));
K S ("right!" ("wrong!" V));

K (() ("right!" V));
K S ("right!" (() V));

reduce arg BEFORE application
    [+] arg will not be repetitively reduced
    [-] eager evaluation -- Could waste time reducing an arg which will be discarded
reduce arg AFTER application
    [+] lazy evaluation -- arguments aren't reduced unless they are needed
    [-] without indirection, an argument could be reduced multiple times

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

