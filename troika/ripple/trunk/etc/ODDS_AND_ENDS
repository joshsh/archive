

, and thus the order in which new linked data is drawn into the execution environment

 based on \textit{stack manipulation}



An RDF use case:

\begin{verbatim}
# l => all items in l
@define listItems:
    rdf:first               # grab the first item
    (/rdf:rest/:listItems)  # grab all items in the rest of the list
    /union 2/ary /i.
\end{verbatim}

This is a program which retrieves all of the elements of a list (in other words, it makes a stream out of a list).  Note: the /swap/swap function is just a trick to keep the quotation from unraveling too soon.  It effectively says: "this quotation has an arity of 1".  Apply :listItems to look at etc:pingTheSemanticWeb's parameters.



\subsection{Example \#2: Exploring a FOAF Neighborhood}

The last example was basically about tree traversal.  In this example, we'll traverse a more complicated and heterogenous structure: the FOAF network.

First, another helper program.  The :optional function will act like the choice operator in a regular expression: if applying its first argument to its second produces a match, then that match will be added to the result along with the original value.  If it does not produce a result, nothing is added.

\begin{verbatim}
@define optional:  id/union/i.
\end{verbatim}

The following query illustrates its behavior.

\begin{verbatim}
5 (10 /add) /:optional.
\end{verbatim}

All we're going to do is to see how many FOAFers we can get to from a single point.  Let's use the foaf:knows and owl:sameAs properties as a kind of iterator to step through the graph

\begin{verbatim}
@define foafStep:  (foaf:knows owl:sameAs /union/i) /:optional/unique.
\end{verbatim}

There are a number of things going on here.  At the highest level, the stream:unique instance demands an argument stack which is reduced to one level.  That forces the dequotation of the :optional function, which connects
the output of a joy:id and the anonymous quotation with the input of the stream:unique.  The quoted expression applies both foaf:knows and owl:sameAs to their argument, passing their output into :optional.  At the lowest level, the program
applies both foaf:knows and owl:sameAs to the argument stack, funnelling their output into the same compositional
pipeline as the original input.  The result is everything you put into the program, plus any additional results gained by following foaf:knows or owl:sameAs edges.  stream:unique guarantees that the program will not issue the same output twice, which is important when we're dealing with a graph with cycles.

Let's apply :foafStep just once to Tim Berners-Lee's URI (note: /foaf:name should weed out anything we get from :foafStep which isn't at least implicitly a foaf:Person).

\begin{verbatim}
@define tbl: <http://www.w3.org/People/Berners-Lee/card#i>.
/:tbl/foaf:name.
/:tbl/:foafStep/foaf:name.
\end{verbatim}

Apply it twice.

\begin{verbatim}
/:tbl :foafStep 2 /times /foaf:name.
\end{verbatim}







  First, some abbreviations:

To start with, we'll walk the graph from reviewer Tom to each of his reviews.
\begin{verbatim}
@prefix foaf: <http://xmlns.com/foaf/0.1/>.

@define tomsReviews:  <http://revyu.com/people/tom> /foaf:made.
\end{verbatim}

We've just defined a program which, when executed, will find the objects of all
foaf:made edges from Tom.  To do so, dequote it.
{\it Note: if you did not load the demo cache above, this will take a while (and possibly annoy someone).  'tail -f ripple.log' is my usual reaction to crawler boredom.}

\begin{verbatim}
/:tomsReviews.
\end{verbatim}

This gives us over 100 results, which is more than we want to wade through, so let's filter out everything except for the more favorable reviews.  For this we will need a new program which discards any review with a rating of less than 4.

\begin{verbatim}
@prefix rev:  <http://purl.org/stuff/rev#>.

@define restrict:  dup/swap/dip/i id scrap /ifte.
@define favorableOnly:  (/rev:rating 3 /gt)/:restrict.
\end{verbatim}

:restrict is a helper program which rejects any input it receives as its second argument which does not pass the boolean criterion that is its first argument.  The last three primitives in the expression are joy:id, which is the identity function, stream:scrap, which simply discards all of its input, and joy:ifte (if-then), which conditionally applies either of two functions.  The first half of the expression is pure stack manipulation.

Apply this script to Tom's reviews, and we have

\begin{verbatim}
/:tomsReviews /:favorableOnly.
\end{verbatim}

This also gives us too many results, so let's look at books.  We happen to know that some books tie in to the RDF Book Mashup with owl:sameAs links, so we'll restrict our results to them.

\begin{verbatim}
@prefix owl:  <http://www.w3.org/2002/07/owl#>.
@prefix scom: <http://sites.wiwiss.fu-berlin.de/suhl/bizer
/bookmashup/simpleCommerceVocab01.rdf#>.

@define bookReviewsOnly:
    (/foaf:primaryTopic/owl:sameAs/rdf:type scom:Book /equal) /:restrict.
/:tomsReviews/:favorableOnly/:bookReviewsOnly/rdfs:label.
\end{verbatim}

The two composed filters leave us with just two results.  We grab their labels

rdf:_1  ("Review of The Unwritten Rules of Phd Research, by tom")
rdf:_2  ("Review of Designing with Web Standards, by Jeffrey Zeldman, by tom")





In the graph: namespace you'll find a list of primitives which might end up being useful for graph transformations.  The nullary primitive graph:new creates a new blank node, to which we can then attach statements using graph:assert

\begin{verbatim}
@define Arthur: /new
    rdfs:type foaf:Person /assert
    foaf:name "Arthur Dent" /assert.
\end{verbatim}

To remove statements from the graph, use graph:deny

\begin{verbatim}
/:Arthur
    foaf:name "Arthur Dent" /deny
    foaf:name "Arthur P. Dent" /assert.
\end{verbatim}

These three functions should be enough to perform all manner of operations on linked data structures.  However, it's not really in the spirit of a functional language to alter state without a guarantee that the side effects will be contained in some way, so these primitives are to be considered experimental.

To remove all statements about a particular subject (see @undefine) and additionally erase it from the cache, use graph:forget.

\begin{verbatim}
/:Arthur /forget.
\end{verbatim}

This is a useful trick to "refresh" the graph with respect to a resource which has either failed to resolve properly or may not be up-to-date with its source.





\footnote{The writing of this paper was supported by Soph-Ware Associates}

 (see License.txt)






\section{The Demo Application}

To begin an interpreter session, use one of the shortcut scripts (ripple or ripple.bat) or type:

\begin{verbatim}
java -classpath target/ripple-full.jar net.fortytwo.ripple.Demo
\end{verbatim}

The demo application uses a RDF/XML file to save state between sessions, instead of a database.  The file demo-cache.rdf contains all of data which would otherwise be drawn in on-the-fly as the interpreter works through the examples in this document.  To use it, type:

\begin{verbatim}
./ripple demo-cache.rdf
\end{verbatim}

Try the examples without the cache to convince yourself that application will arrive at the same results either way, although with an obvious difference in speed.

All of the terms defined in the examples have been written to this dereferenceable namespace:

\begin{verbatim}
@prefix :  <http://fortytwo.net/2007/03/ripple/demo#>.
\end{verbatim}

You can use this directive once and then simply use the terms from the examples without defining them.  The query engine will dereference them as needed.


To build Ripple from scratch, install Maven 2.0.x and issue the command

\begin{verbatim}
$ mvn install
\end{verbatim}

from the directory containing pom.xml.









\begin{verbatim}
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
\end{verbatim}

or a query

\begin{verbatim}
rdf:List.
\end{verbatim}

A directive is a command which performs a named task.  A query is an expression which is passed to the query processor for evaluation, yielding any number of values.  For example, a query for a constant value always yields a single result:

\begin{verbatim}
42.
\end{verbatim}

Other queries may be multivalued in nature.  Once again:

\begin{verbatim}
<http://www.w3.org/People/Berners-Lee/card#i> /foaf:knows.
\end{verbatim}

This is an expression representing all of the individuals foaf:known by Tim
Berners-Lee, and results in several values.  Ripple's compositional plumbing
will distribute further operations over each of these values, so the expression

\begin{verbatim}
<http://www.w3.org/People/Berners-Lee/card#i> /foaf:knows/foaf:name.
\end{verbatim}

has the effect of retrieving all of the names of all of the individuals
foaf:known by TBL.  When there are statements available about a value, the
interpreter displays them in a tree view.


\subsection{Directives}



Note: Ripple's command-line interface includes a tab completor which keeps track of all directives and keywords, as well as all qualified names of URIs which make an appearance in the triple store.  It saves on typing and can be a good way to get a rough idea of what's in a namespace.  For instance, try typing any of the following...

\begin{verbatim}
etc:
graph:
intmath:
joy:
stream:
\end{verbatim}

...followed by a tab character, to get a list of primitive functions in each
of Ripple's library namespaces.


The expression \texttt{(1 2 3)} represents a nullary function which produces a list.  The property \texttt{rdf:type}  consumes the list (properly speaking, a stack containing a list) and produces an intermediate result, \texttt{rdf:List}, which is in turn consumed by \texttt{rdfs:isDefinedBy} to produce the \texttt{rdf:} schema.  Finally, \texttt{dc:title} takes us from the schema to the name of the schema.



Not only does Ripple \emph{operate} on linked data, but its programs are meant to \emph{be} linked data as well.  Every Ripple expression is equivalent to a collection of type rdf:List.  





Characteristically of Ripple, it doesn't matter where or when a program is executed; provided that its URI is made to be dereferenceable (for instance, by exporting data to a public location, or eventually, by attaching the interpreter to a triple store with a SPARQL endpoint), the program itself is dereferenceable, and a Ripple query engine on a remote machine will draw it into its own execution environment as needed.








yields 1, and

\begin{verbatim}
(1 2 3)/rdf:rest/rdf:rest/rdf:first.
\end{verbatim}

yields 3.  If we give an expression a URI, it thereby becomes a resource which can be incorporated into further expressions.

\begin{verbatim}
@define third:  /rdf:rest/rdf:rest/rdf:first.
\end{verbatim}

If the base URI of :third is such that it is dereferenceable -- for instance, if Ripple is attached to a triple store with a SPARQL endpoint at a web location below the base URI -- then :third is a valid program not only to the Ripple implementation executing on the server itself, but also on any client machine.  If demo: represents the base URI, then a query like the following will yield the same result regardless of where or when it is performed.

\begin{verbatim}
(1 2 3)/demo:third.
\end{verbatim}




            