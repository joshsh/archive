@prefix rdf:      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:     <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rpl:      <http://fortytwo.net/2007/03/ripple/schema#> .
@prefix etc:      <http://fortytwo.net/2007/05/ripple/etc#> .
@prefix swoogle:  <http://daml.umbc.edu/ontologies/webofbelief/1.4/swoogle.owl#> .
@prefix xsd:      <http://www.w3.org/2001/XMLSchema#> .

etc:back
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "o" ;
			rpl:isTransparent true ]
		[
			rdfs:label "p" ;
			rpl:isTransparent true ]
		) ;
	rpl:label "back" ;
	rdfs:comment "o p => s" .

etc:endsWith
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "s" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		[
			rdfs:label "suffix" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "endsWith" ;
	rdfs:comment "s suffix  =>  b -- where b is true if the given string ends with the given suffix, otherwise false" .

etc:get
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "url" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:string ;
	rdfs:label "get" ;
	rdfs:comment "issues a GET request and produces the received data as a string" .

etc:length
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "s" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:integer ;
	rdfs:label "length" ;
	rdfs:comment "s  =>  l -- where l is the length of string s" .

etc:matches
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "s" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		[
			rdfs:label "regex" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "matches" ;
	rdfs:comment "s regex  =>  b -- where b is true if the given string matches the given regular expression, otherwise false" .


etc:pingTheSemanticWeb
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:returnType xsd:string ;
	rpl:parameters (
		[
			rdfs:label "type" ;
			rdfs:comment "one of the values 'all', 'foaf', 'sioc', 'doap', 'rdfs' or 'owl'" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		[
			rdfs:label "maxResults" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "pingTheSemanticWeb" ;
	rdfs:comment "requests a list of URIs from the 'Ping the Semantic Web' service" .

etc:pred
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "p" ;
			rpl:parameterType rdf:Property ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "pred" ;
	rdfs:comment "consumes a Property and returns a 'predicate operator'" .

etc:prim
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "p" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "prim" ;
	rdfs:comment "applies a Function" .

etc:rand
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "lim" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:integer ;
	rdfs:label "rand" ;
	rdfs:comment "pushes a pseudorandom int value between 0 (inclusive) and lim (exclusive)" .

etc:replaceAll
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "s" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		[
			rdfs:label "regex" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		[
			rdfs:label "replacement" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:string ;
	rdfs:label "replaceAll" ;
	rdfs:comment "s regex replacement  =>  s2 -- in which each occurrence of the given regular expression in s has been substituted with the given replacement" .

etc:sha1
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "plaintext" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:string ;
	rdfs:label "sha1" ;
	rdfs:comment "finds the sha1 hash of a string" .

etc:split
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "s" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		[
			rdfs:label "regex" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:string ;
	rdfs:label "split" ;
	rdfs:comment "s regex  =>  (s1, s2, s3, ...) -- where s has been divided into substrings by occurrences of regular expression regex" .

etc:startsWith
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "s" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		[
			rdfs:label "prefix" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "startsWith" ;
	rdfs:comment "s prefix  =>  b -- where b is true if the given string begins with the given prefix, otherwise false" .

etc:strCat
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "strA" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		[
			rdfs:label "strB" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:string ;
	rdfs:label "strCat" ;
	rdfs:comment "finds the concatenation strB+strA of two strings" .

etc:substring
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "s" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		[
			rdfs:label "beginIndex" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		[
			rdfs:label "endIndex" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:string ;
	rdfs:label "substring" ;
	rdfs:comment "s beginIndex endIndex  =>  s2 -- where s2 is the substring of s which begins at the specified beginIndex and extends to the character at index endIndex - 1" .

etc:swoogleIt
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "key" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		[
			rdfs:label "queryType" ;
			rpl:parameterType swoogle:SwoogleQueryType ;
			rpl:isTransparent true ]
		[
			rdfs:label "searchString" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "swoogleIt" ;
	rdfs:comment "grabs search results from the Swoogle web service" .

etc:time
	a rpl:Function ;
	rpl:arity 0 ;
	rpl:parameters rdf:nil ;
	rpl:returnType xsd:int ;
	rdfs:label "time" ;
	rdfs:comment "=>  t  -- pushes the current time, in seconds since the Unix epoch" .

etc:toLowerCase
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "s" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:string ;
	rdfs:label "toLowerCase" ;
	rdfs:comment "s  =>  s2 -- where s2 is equal to s with all characters converted to lower case" .

etc:toUpperCase
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "s" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:string ;
	rdfs:label "toUpperCase" ;
	rdfs:comment "s  =>  s2 -- where s2 is equal to s with all characters converted to upper case" .

etc:trim
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "s" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:string ;
	rdfs:label "trim" ;
	rdfs:comment "s  =>  s2 -- where s2 is equal to s with leading and trailing white space omitted" .

etc:urlEncoding
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "plaintext" ;
			rpl:parameterType xsd:string ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:string ;
	rdfs:label "urlEncoding" ;
	rdfs:comment "finds the URL encoding of a string" .

xsd:type
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rpl:isTransparent true ]
		);
	rdfs:label "type" ;
	rdfs:comment "l  =>  data type of literal l" .

<http://www.w3.org/XML/1998/namespace#lang>
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rpl:isTransparent true ]
		);
	rdfs:label "lang" ;
	rdfs:comment "l  =>  language tag of literal l" .
