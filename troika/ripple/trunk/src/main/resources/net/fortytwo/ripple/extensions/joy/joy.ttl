@prefix joy:   <http://fortytwo.net/2007/03/ripple/joy#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rpl:   <http://fortytwo.net/2007/03/ripple/schema#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .

joy:and
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent "true" ]
		[
			rdfs:label "y" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent "true" ]
		) ;
	rdfs:label "and" ;
	rdfs:comment "" .

joy:at
	rdfs:label "at" ;
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "i" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		[
			rdfs:label "list" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "at" ;
	rdfs:comment "Note: as in Joy, lists are 1-indexed" .

joy:concat
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "l1" ;
			rdfs:comment "head of the new list" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent "true" ]
		[
			rdfs:label "l2" ;
			rdfs:comment "tail of the new list" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent "true" ]
		) ;
	rdfs:label "concat" ;
	rdfs:comment "" .

joy:dip
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "c" ;
			rdfs:comment "remains at the top of the stack" ;
			rpl:isTransparent "true" ]
		[
			rdfs:label "l" ;
			rdfs:comment "the list to be dequoted" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent "true" ]
		) ;
	rdfs:label "dip" ;
	rdfs:comment "" .

joy:dup
	a rpl:Function ;
	rpl:arity 1 ;
	rdfs:label "dup" .
	rdfs:comment "x /dup --> x x" .

joy:false
	a rpl:Function ;
	rpl:arity 2 ;
	rdfs:label "false" ;
	rdfs:comment "y x /false --> y" .

joy:fold
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "f" ;
			rdfs:comment "a quoted function" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "v" ;
			rdfs:comment "tail value" ;
			rpl:isTransparent "true" ]
		[
			rdfs:label "l" ;
			rdfs:comment "a list through which to fold f" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent "true" ]
		) ;
	rdfs:label "fold" ;
	rdfs:comment "" .

joy:i
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rdfs:comment "the list to be dequoted" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent "true" ]
		) ;
	rdfs:label "i" ;
	rdfs:comment "" .

joy:id
	rdfs:label "id" ;
	a rpl:Function ;
	rpl:arity 0 ;
	rdfs:label "id" ;
	rdfs:comment "the trivial 'identity' function" .

joy:ifte
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "elsePart" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		[
			rdfs:label "ifPart" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "b" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "ifte" ;
	rdfs:comment "true y x /ifte --> y; false y x /ifte --> x" .

joy:not
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent "true" ]
		) ;
	rdfs:label "not" ;
	rdfs:comment "" .

joy:or
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent "true" ]
		[
			rdfs:label "y" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent "true" ]
		) ;
	rdfs:label "or" ;
	rdfs:comment "" .

joy:pop
	a rpl:Function ;
	rpl:arity 1 ;
	rdfs:label "pop" ;
	rdfs:comment "y x /pop --> y" .

joy:size
	rdfs:label "size" ;
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:returnType xsd:integer ;
	rpl:parameters (
		[
			rdfs:label "list" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "size" ;
	rdfs:comment "finds the number of items in a List" .

joy:stack
	rdfs:label "stack" ;
	a rpl:Function ;
	rpl:arity 0 ;
	rpl:returnType rdf:List ;
	rdfs:label "stack" ;
	rdfs:comment "" .

joy:swap
	a rpl:Function ;
	rpl:arity 2 ;
	rdfs:label "swap" ;
	rdfs:comment "x y /swap --> y x" .

joy:times
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "i" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		[
			rdfs:label "list" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "times" ;
	rdfs:comment "" .

joy:true
	a rpl:Function ;
	rpl:arity 2 ;
	rdfs:label "true" ;
	rdfs:comment "y x /true --> x" .

joy:xor
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent "true" ]
		[
			rdfs:label "y" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent "true" ]
		) ;
	rdfs:label "xor" ;
	rdfs:comment "" .
