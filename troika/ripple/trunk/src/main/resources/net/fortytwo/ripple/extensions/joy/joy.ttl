@prefix joy:   <http://fortytwo.net/2007/03/ripple/joy#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rpl:   <http://fortytwo.net/2007/03/ripple/schema#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .

joy:and
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rpl:Function ;
	rdfs:label "and" ;
	rdfs:comment "x y  ->  z  -- where z is true if x and y are true, otherwise false" .

joy:at
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "i" ;
			rdfs:comment "a list index" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "at" ;
	rdfs:comment "l i  ->  l[i]  -- pushes the member of List l at index i.  Note: lists are 1-indexed" .

joy:branch
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "b" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "t" ;
			rdfs:comment "this program is executed if the condition is true" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "f" ;
			rdfs:comment "this program is executed if the condition is false" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "branch" ;
	rdfs:comment "b t f  ->  /p  -- where p is t if b is true, f if b is false" .

joy:choice
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "b" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		[
			rdfs:label "t" ;
			rdfs:comment "the value chosen if b is true" ;
			rpl:isTransparent true ]
		[
			rdfs:label "f" ;
			rdfs:comment "the value chosen if b is not true" ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rpl:Function ;
	rdfs:label "choice" ;
	rdfs:comment "b t f  ->  x  -- where x is t if b is true, otherwise f" .

joy:concat
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "l1" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "l2" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rdf:List ;
	rdfs:label "concat" ;
	rdfs:comment "l1 l2  ->  l3  -- where l3 is the concatenation of Lists l1 and l2" .

joy:cons
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "l" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rdf:List ;
	rdfs:label "cons" ;
	rdfs:comment "x l  ->  l2  -- where the first member of l2 is x and the rest of l2 is l" .

joy:dip
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "remains at the top of the stack" ;
			rpl:isTransparent true ]
		[
			rdfs:label "p" ;
			rdfs:comment "the program to be executed" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "dip" ;
	rdfs:comment "p x /dip --> /p x" .

joy:dup
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "dup" ;
	rdfs:comment "x  ->  x x" .

joy:dupd
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "dupd" ;
	rdfs:comment "x y  ->  x x y" .

joy:false
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "false" ;
	rdfs:comment "x y  ->  y   -- note: in Joy, false is a literal value, not a function" .

joy:fold
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rdfs:comment "a List through which to fold p" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "v0" ;
			rdfs:comment "initial value" ;
			rpl:isTransparent true ]
		[
			rdfs:label "p" ;
			rdfs:comment "a binary function" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "fold" ;
	rdfs:comment "l v0 p  ->  v  -- starting with value v0, sequentially push members of List l and combine with binary operator p" .

joy:has
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rdf:List ;
	rdfs:label "has" ;
	rdfs:comment "l x  ->  b  -- where b is true if List l contains a member which is equal to x, otherwise false" .

joy:i
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "p" ;
			rdfs:comment "the program to be executed" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "i" ;
	rdfs:comment "p  -> /p  -- push an active copy of p, or 'execute p'" .

joy:id
	a rpl:Function ;
	rpl:arity 0 ;
	rpl:parameters rdf:nil ;
	rdfs:label "id" ;
	rdfs:comment "id  ->  (identity function, does nothing)" .

joy:ifte
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "elsePart" ;
			rdfs:comment "this program is executed if the condition is false" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		[
			rdfs:label "ifPart" ;
			rdfs:comment "this program is executed if the condition is true" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "b" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "ifte" ;
	rdfs:comment "true y x /ifte --> /y; false y x /ifte --> /x" .

joy:in
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "l" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rdf:List ;
	rdfs:label "in" ;
	rdfs:comment "x l  ->  b  -- where b is true if List l contains a member equal to x, otherwise false" .

joy:not
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rpl:Function ;
	rdfs:label "not" ;
	rdfs:comment "x  ->  y  -- where y is true if x is false, otherwise false" .

joy:of
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "i" ;
			rdfs:comment "a list index" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		[
			rdfs:label "l" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "of" ;
	rdfs:comment "i l  ->  l[i]  -- pushes the member of List l at index i.  Note: lists are 1-indexed" .

joy:or
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rpl:Function ;
	rdfs:label "or" ;
	rdfs:comment "x y  ->  z  -- where z is true if x or y is true, otherwise false" .

joy:pop
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "pop" ;
	rdfs:comment "x  ->" .

joy:popd
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "popd" ;
	rdfs:comment "x y  ->  y" .

joy:rolldown
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		[
			rdfs:label "z" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "rolldown" ;
	rdfs:comment "x y z  ->  y z x" .

joy:rolldownd
	a rpl:Function ;
	rpl:arity 4 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		[
			rdfs:label "z" ;
			rpl:isTransparent true ]
		[
			rdfs:label "w" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "rolldownd" ;
	rdfs:comment "x y z w  ->  y z x w" .

joy:rollup
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		[
			rdfs:label "z" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "rollup" ;
	rdfs:comment "x y z  ->  z x y" .

joy:rollupd
	a rpl:Function ;
	rpl:arity 4 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		[
			rdfs:label "z" ;
			rpl:isTransparent true ]
		[
			rdfs:label "w" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "rollupd" ;
	rdfs:comment "x y z w  ->  z x y w" .

joy:rotate
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		[
			rdfs:label "z" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "rotate" ;
	rdfs:comment "x y z  ->  z y x" .

joy:rotated
	a rpl:Function ;
	rpl:arity 4 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		[
			rdfs:label "z" ;
			rpl:isTransparent true ]
		[
			rdfs:label "w" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "rotated" ;
	rdfs:comment "x y z w  ->  z y x w" .

joy:size
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:returnType xsd:integer ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:integer ;
	rdfs:label "size" ;
	rdfs:comment "l  ->  n   -- where n is the number of members of l" .

joy:stack
	a rpl:Function ;
	rpl:arity 0 ;
	rpl:parameters rdf:nil ;
	rpl:returnType rpl:List ;
	rdfs:label "stack" ;
	rdfs:comment "... x y z  ->  ... x y z (... x y z)  -- pushes the stack as a List" .

joy:swap
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "swap" ;
	rdfs:comment "x y  ->  y x" .

joy:swapd
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		[
			rdfs:label "z" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "swapd" ;
	rdfs:comment "x y z  ->  y x z" .

joy:swons
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rdf:List ;
	rdfs:label "swons" ;
	rdfs:comment "l x  ->  l2  -- where the first member of l2 is x and the rest of l2 is l" .

joy:time
	a rpl:Function ;
	rpl:arity 0 ;
	rpl:parameters rdf:nil ;
	rpl:returnType xsd:int ;
	rdfs:label "time" ;
	rdfs:comment "-> t  -- pushes the current time, in seconds since the Unix epoch" .

joy:times
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "p" ;
			rpl:isTransparent true ]
		[
			rdfs:label "n" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "times" ;
	rdfs:comment "p n  ->  ... /p /p /p  -- pushes n active copies of the program p, or 'executes p n times'" .

joy:true
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "true" ;
	rdfs:comment "x y  ->  y  -- note: in Joy, true is a literal value, not a function" .

joy:uncons
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rdf:List ;
	rdfs:label "uncons" ;
	rdfs:comment "l  ->  f r  -- where f is the first member of l and r is the rest of l" .

joy:unstack
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rdfs:comment "a List to become the new stack" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "unstack" ;
	rdfs:comment "(x y z ...)  ->  ... z y x  -- the list at the head of the stack becomes the new stack" .

joy:unswons
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rdfs:comment "a List" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rdf:List ;
	rdfs:label "unswons" ;
	rdfs:comment "l  ->  r f  -- where f is the first member of l and r is the rest of l" .

joy:x
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "p" ;
			rdfs:comment "the program to be executed" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "x" ;
	rdfs:comment "p  -> p /p  -- push a passive copy, then an active copy of p, or 'execute p without removing it'" .

joy:xor
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rpl:Function ;
	rdfs:label "xor" ;
	rdfs:comment "x y  ->  z  -- where z is the logical exclusive disjunction of truth values x and y" .
