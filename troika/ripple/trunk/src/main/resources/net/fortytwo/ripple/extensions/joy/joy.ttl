@prefix joy:   <http://fortytwo.net/2007/03/ripple/joy#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rpl:   <http://fortytwo.net/2007/03/ripple/schema#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .

joy:and
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rpl:Function ;
	rdfs:label "and" ;
	rdfs:comment "true iff x and y are true" .

joy:at
	rdfs:label "at" ;
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "i" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		[
			rdfs:label "l" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "at" ;
	rdfs:comment "retrieves the member of List l at index i.  Note: lists are 1-indexed" .

joy:concat
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "l1" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "l2" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rdf:List ;
	rdfs:label "concat" ;
	rdfs:comment "finds the concatenation of Lists li and l2" .

joy:cons
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rdf:List ;
	rdfs:label "cons" ;
	rdfs:comment "..." .

joy:dip
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "remains at the top of the stack" ;
			rpl:isTransparent true ]
		[
			rdfs:label "p" ;
			rdfs:comment "the program to be executed" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "dip" ;
	rdfs:comment "p x /dip --> /p x" .

joy:dup
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "dup" ;
	rdfs:comment "x /dup --> x x" .

# Note: in joy, false is a simple value, not a function.
joy:false
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "false" ;
	rdfs:comment "y x /false --> y" .

joy:fold
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "p" ;
			rdfs:comment "a quoted function" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "v0" ;
			rdfs:comment "tail value" ;
			rpl:isTransparent true ]
		[
			rdfs:label "l" ;
			rdfs:comment "a list through which to fold ?p" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "fold" ;
	rdfs:comment "starting with value v, sequentially pushes members of List l and combines with binary operator p" .

joy:i
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "l" ;
			rdfs:comment "the program to be executed" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "i" ;
	rdfs:comment "x /i --> /x" .

joy:id
	a rpl:Function ;
	rpl:arity 0 ;
	rdfs:label "id" ;
	rdfs:comment "/id -->" .

joy:ifte
	a rpl:Function ;
	rpl:arity 3 ;
	rpl:parameters (
		[
			rdfs:label "elsePart" ;
			rdfs:comment "this program is executed if the condition is false" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		[
			rdfs:label "ifPart" ;
			rdfs:comment "this program is executed if the condition is true" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		[
			rdfs:label "b" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "ifte" ;
	rdfs:comment "true y x /ifte --> /y; false y x /ifte --> /x" .

joy:not
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rpl:Function ;
	rdfs:label "not" ;
	rdfs:comment "true iff x is false, otherwise false" .

joy:or
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rpl:Function ;
	rdfs:label "or" ;
	rdfs:comment "true iff x or y is true, otherwise false" .

joy:pop
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "pop" ;
	rdfs:comment "x /pop -->" .

joy:size
	rdfs:label "size" ;
	a rpl:Function ;
	rpl:arity 1 ;
	rpl:returnType xsd:integer ;
	rpl:parameters (
		[
			rdfs:label "list" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType xsd:integer ;
	rdfs:label "size" ;
	rdfs:comment "counts the members of a List" .

joy:stack
	rdfs:label "stack" ;
	a rpl:Function ;
	rpl:arity 0 ;
	rpl:returnType rpl:List ;
	rdfs:label "stack" ;
	rdfs:comment "pushes the stack as a List" .

joy:swap
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "swap" ;
	rdfs:comment "x y /swap --> y x" .

joy:times
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "i" ;
			rpl:parameterType xsd:integer ;
			rpl:isTransparent true ]
		[
			rdfs:label "p" ;
			rpl:parameterType rdf:List ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "times" ;
	rdfs:comment "pushes i active copies of p to the head of the stack" .

# Note: in joy, true is a simple value, not a function.
joy:true
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rpl:isTransparent true ]
		) ;
	rdfs:label "true" ;
	rdfs:comment "y x /true --> x" .

joy:xor
	a rpl:Function ;
	rpl:arity 2 ;
	rpl:parameters (
		[
			rdfs:label "x" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		[
			rdfs:label "y" ;
			rdfs:comment "a boolean value (joy:true or joy:false)" ;
			rpl:parameterType rpl:Function ;
			rpl:isTransparent true ]
		) ;
	rpl:returnType rpl:Function ;
	rdfs:label "xor" ;
	rdfs:comment "true iff x is true or y is true, but not both" .
