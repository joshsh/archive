Re: 5 concat L's: Joy


Here is my draft for the Joy section.
I humbly submit it to your savage criticism.

- Manfred

THE CONCATENATIVE LANGUAGE JOY

The datatypes of Joy are integers, reals, truth values, strings (of
characters), small sets of numbers (0..31), dates and times, possibly
heterogeneous lists of any datatypes including lists, and files for
explicit input and output. For all datatypes the usual operators are
provided, and where possible these are polymorphic. In addition to these
there are the operators for shuffling the elements of the untyped stack.

Joy has a large number of combinators, higher order functions which take
other functions as arguments. These arguments are in the form of programs
to compute other functions. Like all other arguments of functions, these
arguments are expected on the stack, but they have to be in an unevaluated
form called quotations, written inside square brackets. Lists are just a
special case of quotations, for example [3 12 7], or [peter paul mary],
or [3 [4 5] "two"].

Three well known higher order functions are for manipulating lists. For
example, given a list of numbers on top of the stack, the following simple
programs can be used: the first to produce a list of their squares, the
second to retain numbers less than 10 and discard others, the third to
compute their sum.

[dup *] map
[10 <] filter
0 [+] fold

In all three examples the quotations are being pushed onto the stack just
before the combinators execute.

One important combinator is the "dip" combinator which is used to access
the stack below the top. In the following, the first program adds the
fourth, third and second element on the stack but leaves the first element
on top. The second one interchanges the third and second element and
leaves the first on top.

[+ +] dip
[swap] dip

To access the stack further down than the top element, the "dip"
combinator can be nested.

Many combinators take several quotations as arguments. One example is the
"ifte" (if-then-else) combinator for branching. It expects three
quotations on the stack, an if-part, a then-part, and topmost an
else-part. For example a program which increments numbers less than 10 and
decrements others is this:

[1 <] [1 +] [1 +] ifte

Note that in this example the if-part [10 <] consumes the number argument,
but it is automatically restored before the appropriate other part is
executed.

The three list manipulating combinators at the beginning abstract from
common recursion patterns use with lists. Joy also has combinators that
abstract from more general recursion patterns that are not restricted to
lists. There are combinators for linear recursion, tail recursion, binary
recursion, more general n-ary recursion, and even the rare nested
recursion (best known from the Ackermann function. Most resemble the
"ifte"
combinator, except that the else-part is split into two, and the recursion
occurs between the two parts. For example the quicksort algorithm might be
paraphrased like this: If the list is small, being empty or having only
one member, then it is sorted already. Otherwise, use its first element as
a pivot to split the rest into two lists, those smaller and those larger
than the first. Recursively, sort the two lists, and then combine the two
results with the pivot. The following one-liner implements this in Joy:

[small] [] [uncons [>] split] [swapd cons concat] binrec
^^
two recursions occur here

Note that the recursion occurs without a recursive definition. Of course
Joy allows definitions, including recursive ones, in this style:

square == dup *

The various general and specialised libraries contain many useful
definitions which extend the base language. There is also a simple module
system which so far has not been used much.

The current implementation of Joy is written in C. Programs, quotations,
lists, and the stack itself are implemented as singly linked lists. I
thank members of the "concatenative" mailing group for numerous
suggestions and corrections, especially John Cowan who wrote a major
portion of the implementation.

END OF CONCAT-JOY